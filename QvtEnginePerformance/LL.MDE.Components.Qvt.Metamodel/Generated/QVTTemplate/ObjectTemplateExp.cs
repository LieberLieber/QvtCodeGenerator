//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LL.MDE.Components.Qvt.Metamodel.EMOF;
using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace LL.MDE.Components.Qvt.Metamodel.QVTTemplate
{
    
    
    /// <summary>
    /// The default implementation of the ObjectTemplateExp class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/QVTTemplate")]
    [XmlNamespacePrefixAttribute("qvttemplate")]
    [DebuggerDisplayAttribute("ObjectTemplateExp {Name}")]
    public class ObjectTemplateExp : TemplateExp, IObjectTemplateExp, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Part property
        /// </summary>
        private ObjectTemplateExpPartCollection _part;
        
        /// <summary>
        /// The backing field for the ReferredClass property
        /// </summary>
        private LL.MDE.Components.Qvt.Metamodel.EMOF.IClass _referredClass;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public ObjectTemplateExp()
        {
            this._part = new ObjectTemplateExpPartCollection(this);
            this._part.CollectionChanging += this.PartCollectionChanging;
            this._part.CollectionChanged += this.PartCollectionChanged;
        }
        
        /// <summary>
        /// The part property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("part")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("objContainer")]
        [ConstantAttribute()]
        public virtual ISetExpression<IPropertyTemplateItem> Part
        {
            get
            {
                return this._part;
            }
        }
        
        /// <summary>
        /// The referredClass property
        /// </summary>
        [XmlElementNameAttribute("referredClass")]
        [XmlAttributeAttribute(true)]
        public virtual LL.MDE.Components.Qvt.Metamodel.EMOF.IClass ReferredClass
        {
            get
            {
                return this._referredClass;
            }
            set
            {
                if ((this._referredClass != value))
                {
                    this.OnReferredClassChanging(EventArgs.Empty);
                    this.OnPropertyChanging("ReferredClass");
                    LL.MDE.Components.Qvt.Metamodel.EMOF.IClass old = this._referredClass;
                    this._referredClass = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReferredClass;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReferredClass;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReferredClassChanged(e);
                    this.OnPropertyChanged("ReferredClass", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ObjectTemplateExpChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ObjectTemplateExpReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired before the ReferredClass property changes its value
        /// </summary>
        public event EventHandler ReferredClassChanging;
        
        /// <summary>
        /// Gets fired when the ReferredClass property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReferredClassChanged;
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Part property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PartCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Part", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Part property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PartCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Part", e);
        }
        
        /// <summary>
        /// Raises the ReferredClassChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferredClassChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.ReferredClassChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReferredClassChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferredClassChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReferredClassChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReferredClass property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReferredClass(object sender, System.EventArgs eventArgs)
        {
            this.ReferredClass = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PART"))
            {
                return this._part;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REFERREDCLASS"))
            {
                this.ReferredClass = ((LL.MDE.Components.Qvt.Metamodel.EMOF.IClass)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "REFERREDCLASS"))
            {
                return new ReferredClassProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "REFERREDCLASS"))
            {
                return new ReferredClassProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            throw new NotSupportedException();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ObjectTemplateExp class
        /// </summary>
        public class ObjectTemplateExpChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ObjectTemplateExp _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ObjectTemplateExpChildrenCollection(ObjectTemplateExp parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Part.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Part.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Part.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPropertyTemplateItem partCasted = item.As<IPropertyTemplateItem>();
                if ((partCasted != null))
                {
                    this._parent.Part.Add(partCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Part.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Part.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> partEnumerator = this._parent.Part.GetEnumerator();
                try
                {
                    for (
                    ; partEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = partEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    partEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPropertyTemplateItem propertyTemplateItemItem = item.As<IPropertyTemplateItem>();
                if (((propertyTemplateItemItem != null) 
                            && this._parent.Part.Remove(propertyTemplateItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Part).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ObjectTemplateExp class
        /// </summary>
        public class ObjectTemplateExpReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ObjectTemplateExp _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ObjectTemplateExpReferencedElementsCollection(ObjectTemplateExp parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Part.Count);
                    if ((this._parent.ReferredClass != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Part.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReferredClassChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Part.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReferredClassChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPropertyTemplateItem partCasted = item.As<IPropertyTemplateItem>();
                if ((partCasted != null))
                {
                    this._parent.Part.Add(partCasted);
                }
                if ((this._parent.ReferredClass == null))
                {
                    LL.MDE.Components.Qvt.Metamodel.EMOF.IClass referredClassCasted = item.As<LL.MDE.Components.Qvt.Metamodel.EMOF.IClass>();
                    if ((referredClassCasted != null))
                    {
                        this._parent.ReferredClass = referredClassCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Part.Clear();
                this._parent.ReferredClass = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Part.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ReferredClass))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> partEnumerator = this._parent.Part.GetEnumerator();
                try
                {
                    for (
                    ; partEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = partEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    partEnumerator.Dispose();
                }
                if ((this._parent.ReferredClass != null))
                {
                    array[arrayIndex] = this._parent.ReferredClass;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPropertyTemplateItem propertyTemplateItemItem = item.As<IPropertyTemplateItem>();
                if (((propertyTemplateItemItem != null) 
                            && this._parent.Part.Remove(propertyTemplateItemItem)))
                {
                    return true;
                }
                if ((this._parent.ReferredClass == item))
                {
                    this._parent.ReferredClass = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Part).Concat(this._parent.ReferredClass).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the referredClass property
        /// </summary>
        private sealed class ReferredClassProxy : ModelPropertyChange<IObjectTemplateExp, LL.MDE.Components.Qvt.Metamodel.EMOF.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferredClassProxy(IObjectTemplateExp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override LL.MDE.Components.Qvt.Metamodel.EMOF.IClass Value
            {
                get
                {
                    return this.ModelElement.ReferredClass;
                }
                set
                {
                    this.ModelElement.ReferredClass = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReferredClassChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReferredClassChanged -= handler;
            }
        }
    }
}

