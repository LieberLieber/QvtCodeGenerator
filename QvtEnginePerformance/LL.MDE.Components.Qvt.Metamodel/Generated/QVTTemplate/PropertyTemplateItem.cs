//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LL.MDE.Components.Qvt.Metamodel.EMOF;
using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace LL.MDE.Components.Qvt.Metamodel.QVTTemplate
{
    
    
    /// <summary>
    /// The default implementation of the PropertyTemplateItem class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/QVTTemplate")]
    [XmlNamespacePrefixAttribute("qvttemplate")]
    public class PropertyTemplateItem : Element, IPropertyTemplateItem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsOpposite property
        /// </summary>
        private Nullable<bool> _isOpposite = false;
        
        /// <summary>
        /// The backing field for the ReferredProperty property
        /// </summary>
        private IProperty _referredProperty;
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private IOclExpression _value;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The isOpposite property
        /// </summary>
        [DefaultValueAttribute(false)]
        [XmlElementNameAttribute("isOpposite")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> IsOpposite
        {
            get
            {
                return this._isOpposite;
            }
            set
            {
                if ((this._isOpposite != value))
                {
                    this.OnIsOppositeChanging(EventArgs.Empty);
                    this.OnPropertyChanging("IsOpposite");
                    Nullable<bool> old = this._isOpposite;
                    this._isOpposite = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsOppositeChanged(e);
                    this.OnPropertyChanged("IsOpposite", e);
                }
            }
        }
        
        /// <summary>
        /// The objContainer property
        /// </summary>
        [XmlElementNameAttribute("objContainer")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("part")]
        public virtual IObjectTemplateExp ObjContainer
        {
            get
            {
                return ModelHelper.CastAs<IObjectTemplateExp>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The referredProperty property
        /// </summary>
        [XmlElementNameAttribute("referredProperty")]
        [XmlAttributeAttribute(true)]
        public virtual IProperty ReferredProperty
        {
            get
            {
                return this._referredProperty;
            }
            set
            {
                if ((this._referredProperty != value))
                {
                    this.OnReferredPropertyChanging(EventArgs.Empty);
                    this.OnPropertyChanging("ReferredProperty");
                    IProperty old = this._referredProperty;
                    this._referredProperty = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReferredProperty;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReferredProperty;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReferredPropertyChanged(e);
                    this.OnPropertyChanged("ReferredProperty", e);
                }
            }
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IOclExpression Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(EventArgs.Empty);
                    this.OnPropertyChanging("Value");
                    IOclExpression old = this._value;
                    this._value = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetValue;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetValue;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PropertyTemplateItemChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PropertyTemplateItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired before the IsOpposite property changes its value
        /// </summary>
        public event EventHandler IsOppositeChanging;
        
        /// <summary>
        /// Gets fired when the IsOpposite property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsOppositeChanged;
        
        /// <summary>
        /// Gets fired when the ObjContainer property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ObjContainerChanged;
        
        /// <summary>
        /// Gets fired before the ReferredProperty property changes its value
        /// </summary>
        public event EventHandler ReferredPropertyChanging;
        
        /// <summary>
        /// Gets fired when the ReferredProperty property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReferredPropertyChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event EventHandler ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Raises the IsOppositeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOppositeChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.IsOppositeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsOppositeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOppositeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsOppositeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ObjContainerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnObjContainerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ObjContainerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IObjectTemplateExp oldObjContainer = ModelHelper.CastAs<IObjectTemplateExp>(oldParent);
            IObjectTemplateExp newObjContainer = ModelHelper.CastAs<IObjectTemplateExp>(newParent);
            if ((oldObjContainer != null))
            {
                oldObjContainer.Part.Remove(this);
            }
            if ((newObjContainer != null))
            {
                newObjContainer.Part.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldObjContainer, newObjContainer);
            this.OnObjContainerChanged(e);
            this.OnPropertyChanged("ObjContainer", e);
        }
        
        /// <summary>
        /// Raises the ReferredPropertyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferredPropertyChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.ReferredPropertyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReferredPropertyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferredPropertyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReferredPropertyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReferredProperty property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReferredProperty(object sender, System.EventArgs eventArgs)
        {
            this.ReferredProperty = null;
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Value property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetValue(object sender, System.EventArgs eventArgs)
        {
            this.Value = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Value))
            {
                return ModelHelper.CreatePath("Value");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "VALUE"))
            {
                return this.Value;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISOPPOSITE"))
            {
                return this.IsOpposite;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OBJCONTAINER"))
            {
                this.ObjContainer = ((IObjectTemplateExp)(value));
                return;
            }
            if ((feature == "REFERREDPROPERTY"))
            {
                this.ReferredProperty = ((IProperty)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((IOclExpression)(value));
                return;
            }
            if ((feature == "ISOPPOSITE"))
            {
                this.IsOpposite = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OBJCONTAINER"))
            {
                return new ObjContainerProxy(this);
            }
            if ((attribute == "REFERREDPROPERTY"))
            {
                return new ReferredPropertyProxy(this);
            }
            if ((attribute == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OBJCONTAINER"))
            {
                return new ObjContainerProxy(this);
            }
            if ((reference == "REFERREDPROPERTY"))
            {
                return new ReferredPropertyProxy(this);
            }
            if ((reference == "VALUE"))
            {
                return new ValueProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            throw new NotSupportedException();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PropertyTemplateItem class
        /// </summary>
        public class PropertyTemplateItemChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PropertyTemplateItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PropertyTemplateItemChildrenCollection(PropertyTemplateItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Value != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ValueChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ValueChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Value == null))
                {
                    IOclExpression valueCasted = item.As<IOclExpression>();
                    if ((valueCasted != null))
                    {
                        this._parent.Value = valueCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Value = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Value))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Value != null))
                {
                    array[arrayIndex] = this._parent.Value;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Value == item))
                {
                    this._parent.Value = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Value).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PropertyTemplateItem class
        /// </summary>
        public class PropertyTemplateItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PropertyTemplateItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PropertyTemplateItemReferencedElementsCollection(PropertyTemplateItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ObjContainer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReferredProperty != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Value != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ObjContainerChanged += this.PropagateValueChanges;
                this._parent.ReferredPropertyChanged += this.PropagateValueChanges;
                this._parent.ValueChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ObjContainerChanged -= this.PropagateValueChanges;
                this._parent.ReferredPropertyChanged -= this.PropagateValueChanges;
                this._parent.ValueChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ObjContainer == null))
                {
                    IObjectTemplateExp objContainerCasted = item.As<IObjectTemplateExp>();
                    if ((objContainerCasted != null))
                    {
                        this._parent.ObjContainer = objContainerCasted;
                        return;
                    }
                }
                if ((this._parent.ReferredProperty == null))
                {
                    IProperty referredPropertyCasted = item.As<IProperty>();
                    if ((referredPropertyCasted != null))
                    {
                        this._parent.ReferredProperty = referredPropertyCasted;
                        return;
                    }
                }
                if ((this._parent.Value == null))
                {
                    IOclExpression valueCasted = item.As<IOclExpression>();
                    if ((valueCasted != null))
                    {
                        this._parent.Value = valueCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ObjContainer = null;
                this._parent.ReferredProperty = null;
                this._parent.Value = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ObjContainer))
                {
                    return true;
                }
                if ((item == this._parent.ReferredProperty))
                {
                    return true;
                }
                if ((item == this._parent.Value))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ObjContainer != null))
                {
                    array[arrayIndex] = this._parent.ObjContainer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReferredProperty != null))
                {
                    array[arrayIndex] = this._parent.ReferredProperty;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Value != null))
                {
                    array[arrayIndex] = this._parent.Value;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ObjContainer == item))
                {
                    this._parent.ObjContainer = null;
                    return true;
                }
                if ((this._parent.ReferredProperty == item))
                {
                    this._parent.ReferredProperty = null;
                    return true;
                }
                if ((this._parent.Value == item))
                {
                    this._parent.Value = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ObjContainer).Concat(this._parent.ReferredProperty).Concat(this._parent.Value).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isOpposite property
        /// </summary>
        private sealed class IsOppositeProxy : ModelPropertyChange<IPropertyTemplateItem, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOppositeProxy(IPropertyTemplateItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsOpposite;
                }
                set
                {
                    this.ModelElement.IsOpposite = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsOppositeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsOppositeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the objContainer property
        /// </summary>
        private sealed class ObjContainerProxy : ModelPropertyChange<IPropertyTemplateItem, IObjectTemplateExp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ObjContainerProxy(IPropertyTemplateItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IObjectTemplateExp Value
            {
                get
                {
                    return this.ModelElement.ObjContainer;
                }
                set
                {
                    this.ModelElement.ObjContainer = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ObjContainerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ObjContainerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the referredProperty property
        /// </summary>
        private sealed class ReferredPropertyProxy : ModelPropertyChange<IPropertyTemplateItem, IProperty>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferredPropertyProxy(IPropertyTemplateItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProperty Value
            {
                get
                {
                    return this.ModelElement.ReferredProperty;
                }
                set
                {
                    this.ModelElement.ReferredProperty = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReferredPropertyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReferredPropertyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IPropertyTemplateItem, IOclExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IPropertyTemplateItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOclExpression Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged -= handler;
            }
        }
    }
}

