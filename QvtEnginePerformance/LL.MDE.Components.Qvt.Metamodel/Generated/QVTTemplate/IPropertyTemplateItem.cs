//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LL.MDE.Components.Qvt.Metamodel.EMOF;
using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace LL.MDE.Components.Qvt.Metamodel.QVTTemplate
{
    
    
    /// <summary>
    /// The public interface for PropertyTemplateItem
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PropertyTemplateItem))]
    [XmlDefaultImplementationTypeAttribute(typeof(PropertyTemplateItem))]
    public interface IPropertyTemplateItem : IModelElement, IElement
    {
        
        /// <summary>
        /// The isOpposite property
        /// </summary>
        Nullable<bool> IsOpposite
        {
            get;
            set;
        }
        
        /// <summary>
        /// The objContainer property
        /// </summary>
        IObjectTemplateExp ObjContainer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The referredProperty property
        /// </summary>
        IProperty ReferredProperty
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        IOclExpression Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the IsOpposite property changes its value
        /// </summary>
        event EventHandler IsOppositeChanging;
        
        /// <summary>
        /// Gets fired when the IsOpposite property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IsOppositeChanged;
        
        /// <summary>
        /// Gets fired when the ObjContainer property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ObjContainerChanged;
        
        /// <summary>
        /// Gets fired before the ReferredProperty property changes its value
        /// </summary>
        event EventHandler ReferredPropertyChanging;
        
        /// <summary>
        /// Gets fired when the ReferredProperty property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ReferredPropertyChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event EventHandler ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ValueChanged;
    }
}

