//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LL.MDE.Components.Qvt.Metamodel.EMOF;
using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
using LL.MDE.Components.Qvt.Metamodel.QVTBase;
using LL.MDE.Components.Qvt.Metamodel.QVTTemplate;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace LL.MDE.Components.Qvt.Metamodel.QVTRelation
{
    
    
    /// <summary>
    /// The default implementation of the Relation class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/QVTRelation")]
    [XmlNamespacePrefixAttribute("qvtrelation")]
    [ModelRepresentationClassAttribute("http://www.omg.org/spec/QVT/20140401/QVTRelation#//Relation/")]
    [DebuggerDisplayAttribute("Relation {Name}")]
    public class Relation : Rule, IRelation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsTopLevel property
        /// </summary>
        private Nullable<bool> _isTopLevel;
        
        /// <summary>
        /// The backing field for the OperationalImpl property
        /// </summary>
        private RelationOperationalImplCollection _operationalImpl;
        
        /// <summary>
        /// The backing field for the Variable property
        /// </summary>
        private ObservableCompositionSet<IVariable> _variable;
        
        /// <summary>
        /// The backing field for the When property
        /// </summary>
        private IPattern _when;
        
        /// <summary>
        /// The backing field for the Where property
        /// </summary>
        private IPattern _where;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Relation()
        {
            this._operationalImpl = new RelationOperationalImplCollection(this);
            this._operationalImpl.CollectionChanging += this.OperationalImplCollectionChanging;
            this._operationalImpl.CollectionChanged += this.OperationalImplCollectionChanged;
            this._variable = new ObservableCompositionSet<IVariable>(this);
            this._variable.CollectionChanging += this.VariableCollectionChanging;
            this._variable.CollectionChanged += this.VariableCollectionChanged;
        }
        
        /// <summary>
        /// The isTopLevel property
        /// </summary>
        [XmlElementNameAttribute("isTopLevel")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> IsTopLevel
        {
            get
            {
                return this._isTopLevel;
            }
            set
            {
                if ((this._isTopLevel != value))
                {
                    this.OnIsTopLevelChanging(EventArgs.Empty);
                    this.OnPropertyChanging("IsTopLevel");
                    Nullable<bool> old = this._isTopLevel;
                    this._isTopLevel = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsTopLevelChanged(e);
                    this.OnPropertyChanged("IsTopLevel", e);
                }
            }
        }
        
        /// <summary>
        /// The operationalImpl property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("operationalImpl")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("relation")]
        [ConstantAttribute()]
        public virtual ISetExpression<IRelationImplementation> OperationalImpl
        {
            get
            {
                return this._operationalImpl;
            }
        }
        
        /// <summary>
        /// The variable property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("variable")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IVariable> Variable
        {
            get
            {
                return this._variable;
            }
        }
        
        /// <summary>
        /// The when property
        /// </summary>
        [XmlElementNameAttribute("when")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IPattern When
        {
            get
            {
                return this._when;
            }
            set
            {
                if ((this._when != value))
                {
                    this.OnWhenChanging(EventArgs.Empty);
                    this.OnPropertyChanging("When");
                    IPattern old = this._when;
                    this._when = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetWhen;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetWhen;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWhenChanged(e);
                    this.OnPropertyChanged("When", e);
                }
            }
        }
        
        /// <summary>
        /// The where property
        /// </summary>
        [XmlElementNameAttribute("where")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IPattern Where
        {
            get
            {
                return this._where;
            }
            set
            {
                if ((this._where != value))
                {
                    this.OnWhereChanging(EventArgs.Empty);
                    this.OnPropertyChanging("Where");
                    IPattern old = this._where;
                    this._where = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetWhere;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetWhere;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWhereChanged(e);
                    this.OnPropertyChanged("Where", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RelationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RelationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/QVTRelation#//Relation/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsTopLevel property changes its value
        /// </summary>
        public event EventHandler IsTopLevelChanging;
        
        /// <summary>
        /// Gets fired when the IsTopLevel property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsTopLevelChanged;
        
        /// <summary>
        /// Gets fired before the When property changes its value
        /// </summary>
        public event EventHandler WhenChanging;
        
        /// <summary>
        /// Gets fired when the When property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> WhenChanged;
        
        /// <summary>
        /// Gets fired before the Where property changes its value
        /// </summary>
        public event EventHandler WhereChanging;
        
        /// <summary>
        /// Gets fired when the Where property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> WhereChanged;
        
        /// <summary>
        /// Raises the IsTopLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsTopLevelChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.IsTopLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsTopLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsTopLevelChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsTopLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OperationalImpl property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperationalImplCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OperationalImpl", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OperationalImpl property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperationalImplCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OperationalImpl", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Variable property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VariableCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Variable", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Variable property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VariableCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Variable", e);
        }
        
        /// <summary>
        /// Raises the WhenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWhenChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.WhenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WhenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWhenChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.WhenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the When property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWhen(object sender, System.EventArgs eventArgs)
        {
            this.When = null;
        }
        
        /// <summary>
        /// Raises the WhereChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWhereChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.WhereChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WhereChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWhereChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.WhereChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Where property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWhere(object sender, System.EventArgs eventArgs)
        {
            this.Where = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.When))
            {
                return ModelHelper.CreatePath("When");
            }
            if ((element == this.Where))
            {
                return ModelHelper.CreatePath("Where");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "WHEN"))
            {
                return this.When;
            }
            if ((reference == "WHERE"))
            {
                return this.Where;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISTOPLEVEL"))
            {
                return this.IsTopLevel;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OPERATIONALIMPL"))
            {
                return this._operationalImpl;
            }
            if ((feature == "VARIABLE"))
            {
                return this._variable;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "WHEN"))
            {
                this.When = ((IPattern)(value));
                return;
            }
            if ((feature == "WHERE"))
            {
                this.Where = ((IPattern)(value));
                return;
            }
            if ((feature == "ISTOPLEVEL"))
            {
                this.IsTopLevel = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "WHEN"))
            {
                return new WhenProxy(this);
            }
            if ((attribute == "WHERE"))
            {
                return new WhereProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "WHEN"))
            {
                return new WhenProxy(this);
            }
            if ((reference == "WHERE"))
            {
                return new WhereProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.omg.org/spec/QVT/20140401/QVTRelation#//Relation/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Relation class
        /// </summary>
        public class RelationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Relation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RelationChildrenCollection(Relation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OperationalImpl.Count);
                    count = (count + this._parent.Variable.Count);
                    if ((this._parent.When != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Where != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OperationalImpl.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Variable.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WhenChanged += this.PropagateValueChanges;
                this._parent.WhereChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OperationalImpl.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Variable.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WhenChanged -= this.PropagateValueChanges;
                this._parent.WhereChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IRelationImplementation operationalImplCasted = item.As<IRelationImplementation>();
                if ((operationalImplCasted != null))
                {
                    this._parent.OperationalImpl.Add(operationalImplCasted);
                }
                IVariable variableCasted = item.As<IVariable>();
                if ((variableCasted != null))
                {
                    this._parent.Variable.Add(variableCasted);
                }
                if ((this._parent.When == null))
                {
                    IPattern whenCasted = item.As<IPattern>();
                    if ((whenCasted != null))
                    {
                        this._parent.When = whenCasted;
                        return;
                    }
                }
                if ((this._parent.Where == null))
                {
                    IPattern whereCasted = item.As<IPattern>();
                    if ((whereCasted != null))
                    {
                        this._parent.Where = whereCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OperationalImpl.Clear();
                this._parent.Variable.Clear();
                this._parent.When = null;
                this._parent.Where = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OperationalImpl.Contains(item))
                {
                    return true;
                }
                if (this._parent.Variable.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.When))
                {
                    return true;
                }
                if ((item == this._parent.Where))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> operationalImplEnumerator = this._parent.OperationalImpl.GetEnumerator();
                try
                {
                    for (
                    ; operationalImplEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = operationalImplEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    operationalImplEnumerator.Dispose();
                }
                IEnumerator<IModelElement> variableEnumerator = this._parent.Variable.GetEnumerator();
                try
                {
                    for (
                    ; variableEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = variableEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    variableEnumerator.Dispose();
                }
                if ((this._parent.When != null))
                {
                    array[arrayIndex] = this._parent.When;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Where != null))
                {
                    array[arrayIndex] = this._parent.Where;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IRelationImplementation relationImplementationItem = item.As<IRelationImplementation>();
                if (((relationImplementationItem != null) 
                            && this._parent.OperationalImpl.Remove(relationImplementationItem)))
                {
                    return true;
                }
                IVariable variableItem = item.As<IVariable>();
                if (((variableItem != null) 
                            && this._parent.Variable.Remove(variableItem)))
                {
                    return true;
                }
                if ((this._parent.When == item))
                {
                    this._parent.When = null;
                    return true;
                }
                if ((this._parent.Where == item))
                {
                    this._parent.Where = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OperationalImpl).Concat(this._parent.Variable).Concat(this._parent.When).Concat(this._parent.Where).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Relation class
        /// </summary>
        public class RelationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Relation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RelationReferencedElementsCollection(Relation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OperationalImpl.Count);
                    count = (count + this._parent.Variable.Count);
                    if ((this._parent.When != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Where != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OperationalImpl.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Variable.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WhenChanged += this.PropagateValueChanges;
                this._parent.WhereChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OperationalImpl.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Variable.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WhenChanged -= this.PropagateValueChanges;
                this._parent.WhereChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IRelationImplementation operationalImplCasted = item.As<IRelationImplementation>();
                if ((operationalImplCasted != null))
                {
                    this._parent.OperationalImpl.Add(operationalImplCasted);
                }
                IVariable variableCasted = item.As<IVariable>();
                if ((variableCasted != null))
                {
                    this._parent.Variable.Add(variableCasted);
                }
                if ((this._parent.When == null))
                {
                    IPattern whenCasted = item.As<IPattern>();
                    if ((whenCasted != null))
                    {
                        this._parent.When = whenCasted;
                        return;
                    }
                }
                if ((this._parent.Where == null))
                {
                    IPattern whereCasted = item.As<IPattern>();
                    if ((whereCasted != null))
                    {
                        this._parent.Where = whereCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OperationalImpl.Clear();
                this._parent.Variable.Clear();
                this._parent.When = null;
                this._parent.Where = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OperationalImpl.Contains(item))
                {
                    return true;
                }
                if (this._parent.Variable.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.When))
                {
                    return true;
                }
                if ((item == this._parent.Where))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> operationalImplEnumerator = this._parent.OperationalImpl.GetEnumerator();
                try
                {
                    for (
                    ; operationalImplEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = operationalImplEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    operationalImplEnumerator.Dispose();
                }
                IEnumerator<IModelElement> variableEnumerator = this._parent.Variable.GetEnumerator();
                try
                {
                    for (
                    ; variableEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = variableEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    variableEnumerator.Dispose();
                }
                if ((this._parent.When != null))
                {
                    array[arrayIndex] = this._parent.When;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Where != null))
                {
                    array[arrayIndex] = this._parent.Where;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IRelationImplementation relationImplementationItem = item.As<IRelationImplementation>();
                if (((relationImplementationItem != null) 
                            && this._parent.OperationalImpl.Remove(relationImplementationItem)))
                {
                    return true;
                }
                IVariable variableItem = item.As<IVariable>();
                if (((variableItem != null) 
                            && this._parent.Variable.Remove(variableItem)))
                {
                    return true;
                }
                if ((this._parent.When == item))
                {
                    this._parent.When = null;
                    return true;
                }
                if ((this._parent.Where == item))
                {
                    this._parent.Where = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OperationalImpl).Concat(this._parent.Variable).Concat(this._parent.When).Concat(this._parent.Where).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isTopLevel property
        /// </summary>
        private sealed class IsTopLevelProxy : ModelPropertyChange<IRelation, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsTopLevelProxy(IRelation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsTopLevel;
                }
                set
                {
                    this.ModelElement.IsTopLevel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsTopLevelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsTopLevelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the when property
        /// </summary>
        private sealed class WhenProxy : ModelPropertyChange<IRelation, IPattern>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WhenProxy(IRelation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPattern Value
            {
                get
                {
                    return this.ModelElement.When;
                }
                set
                {
                    this.ModelElement.When = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WhenChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WhenChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the where property
        /// </summary>
        private sealed class WhereProxy : ModelPropertyChange<IRelation, IPattern>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WhereProxy(IRelation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPattern Value
            {
                get
                {
                    return this.ModelElement.Where;
                }
                set
                {
                    this.ModelElement.Where = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WhereChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WhereChanged -= handler;
            }
        }
    }
}

