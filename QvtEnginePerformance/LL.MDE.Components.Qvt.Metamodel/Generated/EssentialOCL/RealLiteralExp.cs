//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LL.MDE.Components.Qvt.Metamodel.EMOF;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace LL.MDE.Components.Qvt.Metamodel.EssentialOCL
{
    
    
    /// <summary>
    /// The default implementation of the RealLiteralExp class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/EssentialOCL")]
    [XmlNamespacePrefixAttribute("essentialocl")]
    [DebuggerDisplayAttribute("RealLiteralExp {Name}")]
    public class RealLiteralExp : NumericLiteralExp, IRealLiteralExp, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RealSymbol property
        /// </summary>
        private Nullable<float> _realSymbol;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The realSymbol property
        /// </summary>
        [XmlElementNameAttribute("realSymbol")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> RealSymbol
        {
            get
            {
                return this._realSymbol;
            }
            set
            {
                if ((this._realSymbol != value))
                {
                    this.OnRealSymbolChanging(EventArgs.Empty);
                    this.OnPropertyChanging("RealSymbol");
                    Nullable<float> old = this._realSymbol;
                    this._realSymbol = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRealSymbolChanged(e);
                    this.OnPropertyChanged("RealSymbol", e);
                }
            }
        }
        
        /// <summary>
        /// Gets fired before the RealSymbol property changes its value
        /// </summary>
        public event EventHandler RealSymbolChanging;
        
        /// <summary>
        /// Gets fired when the RealSymbol property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RealSymbolChanged;
        
        /// <summary>
        /// Raises the RealSymbolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRealSymbolChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.RealSymbolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RealSymbolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRealSymbolChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RealSymbolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "REALSYMBOL"))
            {
                return this.RealSymbol;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REALSYMBOL"))
            {
                this.RealSymbol = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            throw new NotSupportedException();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the realSymbol property
        /// </summary>
        private sealed class RealSymbolProxy : ModelPropertyChange<IRealLiteralExp, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RealSymbolProxy(IRealLiteralExp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.RealSymbol;
                }
                set
                {
                    this.ModelElement.RealSymbol = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RealSymbolChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RealSymbolChanged -= handler;
            }
        }
    }
}

