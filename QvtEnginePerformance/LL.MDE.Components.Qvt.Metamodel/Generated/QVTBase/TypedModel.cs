//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LL.MDE.Components.Qvt.Metamodel.EMOF;
using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace LL.MDE.Components.Qvt.Metamodel.QVTBase
{
    
    
    /// <summary>
    /// The default implementation of the TypedModel class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/QVTBase")]
    [XmlNamespacePrefixAttribute("qvtbase")]
    [DebuggerDisplayAttribute("TypedModel {Name}")]
    public class TypedModel : NamedElement, ITypedModel, IModelElement
    {
        
        /// <summary>
        /// The backing field for the DependsOn property
        /// </summary>
        private ObservableAssociationSet<ITypedModel> _dependsOn;
        
        /// <summary>
        /// The backing field for the UsedPackage property
        /// </summary>
        private ObservableAssociationSet<IPackage> _usedPackage;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public TypedModel()
        {
            this._dependsOn = new ObservableAssociationSet<ITypedModel>();
            this._dependsOn.CollectionChanging += this.DependsOnCollectionChanging;
            this._dependsOn.CollectionChanged += this.DependsOnCollectionChanged;
            this._usedPackage = new ObservableAssociationSet<IPackage>();
            this._usedPackage.CollectionChanging += this.UsedPackageCollectionChanging;
            this._usedPackage.CollectionChanged += this.UsedPackageCollectionChanged;
        }
        
        /// <summary>
        /// The dependsOn property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("dependsOn")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual ISetExpression<ITypedModel> DependsOn
        {
            get
            {
                return this._dependsOn;
            }
        }
        
        /// <summary>
        /// The transformation property
        /// </summary>
        [XmlElementNameAttribute("transformation")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("modelParameter")]
        public virtual ITransformation Transformation
        {
            get
            {
                return ModelHelper.CastAs<ITransformation>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The usedPackage property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("usedPackage")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual ISetExpression<IPackage> UsedPackage
        {
            get
            {
                return this._usedPackage;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TypedModelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired when the Transformation property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TransformationChanged;
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DependsOn property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DependsOnCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DependsOn", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DependsOn property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DependsOnCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DependsOn", e);
        }
        
        /// <summary>
        /// Raises the TransformationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TransformationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ITransformation oldTransformation = ModelHelper.CastAs<ITransformation>(oldParent);
            ITransformation newTransformation = ModelHelper.CastAs<ITransformation>(newParent);
            if ((oldTransformation != null))
            {
                oldTransformation.ModelParameter.Remove(this);
            }
            if ((newTransformation != null))
            {
                newTransformation.ModelParameter.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldTransformation, newTransformation);
            this.OnTransformationChanged(e);
            this.OnPropertyChanged("Transformation", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UsedPackage property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UsedPackageCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("UsedPackage", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UsedPackage property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UsedPackageCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UsedPackage", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DEPENDSON"))
            {
                return this._dependsOn;
            }
            if ((feature == "USEDPACKAGE"))
            {
                return this._usedPackage;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TRANSFORMATION"))
            {
                this.Transformation = ((ITransformation)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TRANSFORMATION"))
            {
                return new TransformationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TRANSFORMATION"))
            {
                return new TransformationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            throw new NotSupportedException();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TypedModel class
        /// </summary>
        public class TypedModelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TypedModel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TypedModelReferencedElementsCollection(TypedModel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.DependsOn.Count);
                    if ((this._parent.Transformation != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.UsedPackage.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DependsOn.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TransformationChanged += this.PropagateValueChanges;
                this._parent.UsedPackage.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DependsOn.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TransformationChanged -= this.PropagateValueChanges;
                this._parent.UsedPackage.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITypedModel dependsOnCasted = item.As<ITypedModel>();
                if ((dependsOnCasted != null))
                {
                    this._parent.DependsOn.Add(dependsOnCasted);
                }
                if ((this._parent.Transformation == null))
                {
                    ITransformation transformationCasted = item.As<ITransformation>();
                    if ((transformationCasted != null))
                    {
                        this._parent.Transformation = transformationCasted;
                        return;
                    }
                }
                IPackage usedPackageCasted = item.As<IPackage>();
                if ((usedPackageCasted != null))
                {
                    this._parent.UsedPackage.Add(usedPackageCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DependsOn.Clear();
                this._parent.Transformation = null;
                this._parent.UsedPackage.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.DependsOn.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Transformation))
                {
                    return true;
                }
                if (this._parent.UsedPackage.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> dependsOnEnumerator = this._parent.DependsOn.GetEnumerator();
                try
                {
                    for (
                    ; dependsOnEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dependsOnEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dependsOnEnumerator.Dispose();
                }
                if ((this._parent.Transformation != null))
                {
                    array[arrayIndex] = this._parent.Transformation;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> usedPackageEnumerator = this._parent.UsedPackage.GetEnumerator();
                try
                {
                    for (
                    ; usedPackageEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = usedPackageEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    usedPackageEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITypedModel typedModelItem = item.As<ITypedModel>();
                if (((typedModelItem != null) 
                            && this._parent.DependsOn.Remove(typedModelItem)))
                {
                    return true;
                }
                if ((this._parent.Transformation == item))
                {
                    this._parent.Transformation = null;
                    return true;
                }
                IPackage packageItem = item.As<IPackage>();
                if (((packageItem != null) 
                            && this._parent.UsedPackage.Remove(packageItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DependsOn).Concat(this._parent.Transformation).Concat(this._parent.UsedPackage).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transformation property
        /// </summary>
        private sealed class TransformationProxy : ModelPropertyChange<ITypedModel, ITransformation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformationProxy(ITypedModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformation Value
            {
                get
                {
                    return this.ModelElement.Transformation;
                }
                set
                {
                    this.ModelElement.Transformation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformationChanged -= handler;
            }
        }
    }
}

