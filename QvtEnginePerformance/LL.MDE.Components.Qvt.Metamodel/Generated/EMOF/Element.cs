//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace LL.MDE.Components.Qvt.Metamodel.EMOF
{
    
    
    /// <summary>
    /// The default implementation of the Element class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/EMOF")]
    [XmlNamespacePrefixAttribute("emof")]
    public abstract class Element : Object, IElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the OwnedComment property
        /// </summary>
        private ObservableCompositionSet<IComment> _ownedComment;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Element()
        {
            this._ownedComment = new ObservableCompositionSet<IComment>(this);
            this._ownedComment.CollectionChanging += this.OwnedCommentCollectionChanging;
            this._ownedComment.CollectionChanged += this.OwnedCommentCollectionChanged;
        }
        
        /// <summary>
        /// The ownedComment property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("ownedComment")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IComment> OwnedComment
        {
            get
            {
                return this._ownedComment;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ElementChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ElementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        private void Container()
        {
            throw new NotImplementedException();
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="object"></param>
        private void Equals(IObject @object)
        {
            if ((@object != null))
            {
                throw new ArgumentNullException("object");
            }
            throw new NotImplementedException();
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        private void Get(IProperty property)
        {
            if ((property != null))
            {
                throw new ArgumentNullException("property");
            }
            throw new NotImplementedException();
        }
        
        /// <summary>
        /// 
        /// </summary>
        private void GetMetaClass()
        {
            throw new NotImplementedException();
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        private void IsSet(IProperty property)
        {
            if ((property != null))
            {
                throw new ArgumentNullException("property");
            }
            throw new NotImplementedException();
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        /// <param name="object"></param>
        private void Set(IProperty property, IObject @object)
        {
            if ((property != null))
            {
                throw new ArgumentNullException("property");
            }
            if ((@object != null))
            {
                throw new ArgumentNullException("object");
            }
            throw new NotImplementedException();
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        private void Unset(IProperty property)
        {
            if ((property != null))
            {
                throw new ArgumentNullException("property");
            }
            throw new NotImplementedException();
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedComment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedCommentCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OwnedComment", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedComment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedCommentCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedComment", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OWNEDCOMMENT"))
            {
                return this._ownedComment;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            throw new NotSupportedException();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Element class
        /// </summary>
        public class ElementChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Element _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ElementChildrenCollection(Element parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OwnedComment.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OwnedComment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OwnedComment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IComment ownedCommentCasted = item.As<IComment>();
                if ((ownedCommentCasted != null))
                {
                    this._parent.OwnedComment.Add(ownedCommentCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OwnedComment.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OwnedComment.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> ownedCommentEnumerator = this._parent.OwnedComment.GetEnumerator();
                try
                {
                    for (
                    ; ownedCommentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedCommentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedCommentEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IComment commentItem = item.As<IComment>();
                if (((commentItem != null) 
                            && this._parent.OwnedComment.Remove(commentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OwnedComment).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Element class
        /// </summary>
        public class ElementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Element _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ElementReferencedElementsCollection(Element parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OwnedComment.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OwnedComment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OwnedComment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IComment ownedCommentCasted = item.As<IComment>();
                if ((ownedCommentCasted != null))
                {
                    this._parent.OwnedComment.Add(ownedCommentCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OwnedComment.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OwnedComment.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> ownedCommentEnumerator = this._parent.OwnedComment.GetEnumerator();
                try
                {
                    for (
                    ; ownedCommentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedCommentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedCommentEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IComment commentItem = item.As<IComment>();
                if (((commentItem != null) 
                            && this._parent.OwnedComment.Remove(commentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OwnedComment).GetEnumerator();
            }
        }
    }
}

