//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace LL.MDE.Components.Qvt.Metamodel.EMOF
{
    
    
    /// <summary>
    /// The public interface for Property
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Property))]
    [XmlDefaultImplementationTypeAttribute(typeof(Property))]
    public interface IProperty : IModelElement, IMultiplicityElement, ITypedElement
    {
        
        /// <summary>
        /// The default property
        /// </summary>
        string Default
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isComposite property
        /// </summary>
        Nullable<bool> IsComposite
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isDerived property
        /// </summary>
        Nullable<bool> IsDerived
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isID property
        /// </summary>
        Nullable<bool> IsID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isReadOnly property
        /// </summary>
        Nullable<bool> IsReadOnly
        {
            get;
            set;
        }
        
        /// <summary>
        /// The class property
        /// </summary>
        LL.MDE.Components.Qvt.Metamodel.EMOF.IClass Class
        {
            get;
            set;
        }
        
        /// <summary>
        /// The opposite property
        /// </summary>
        IProperty Opposite
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Default property changes its value
        /// </summary>
        event EventHandler DefaultChanging;
        
        /// <summary>
        /// Gets fired when the Default property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> DefaultChanged;
        
        /// <summary>
        /// Gets fired before the IsComposite property changes its value
        /// </summary>
        event EventHandler IsCompositeChanging;
        
        /// <summary>
        /// Gets fired when the IsComposite property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IsCompositeChanged;
        
        /// <summary>
        /// Gets fired before the IsDerived property changes its value
        /// </summary>
        event EventHandler IsDerivedChanging;
        
        /// <summary>
        /// Gets fired when the IsDerived property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IsDerivedChanged;
        
        /// <summary>
        /// Gets fired before the IsID property changes its value
        /// </summary>
        event EventHandler IsIDChanging;
        
        /// <summary>
        /// Gets fired when the IsID property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IsIDChanged;
        
        /// <summary>
        /// Gets fired before the IsReadOnly property changes its value
        /// </summary>
        event EventHandler IsReadOnlyChanging;
        
        /// <summary>
        /// Gets fired when the IsReadOnly property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> IsReadOnlyChanged;
        
        /// <summary>
        /// Gets fired when the Class property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> ClassChanged;
        
        /// <summary>
        /// Gets fired before the Opposite property changes its value
        /// </summary>
        event EventHandler OppositeChanging;
        
        /// <summary>
        /// Gets fired when the Opposite property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> OppositeChanged;
    }
}

