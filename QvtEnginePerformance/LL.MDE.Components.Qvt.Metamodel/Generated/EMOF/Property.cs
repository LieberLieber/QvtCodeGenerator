//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace LL.MDE.Components.Qvt.Metamodel.EMOF
{
    
    
    /// <summary>
    /// The default implementation of the Property class
    /// </summary>
    [XmlNamespaceAttribute("http://www.omg.org/spec/QVT/20140401/EMOF")]
    [XmlNamespacePrefixAttribute("emof")]
    [DebuggerDisplayAttribute("Property {Name}")]
    public class Property : TypedElement, IProperty, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Default property
        /// </summary>
        private string _default;
        
        /// <summary>
        /// The backing field for the IsComposite property
        /// </summary>
        private Nullable<bool> _isComposite = false;
        
        /// <summary>
        /// The backing field for the IsDerived property
        /// </summary>
        private Nullable<bool> _isDerived = false;
        
        /// <summary>
        /// The backing field for the IsID property
        /// </summary>
        private Nullable<bool> _isID;
        
        /// <summary>
        /// The backing field for the IsReadOnly property
        /// </summary>
        private Nullable<bool> _isReadOnly = false;
        
        /// <summary>
        /// The backing field for the Opposite property
        /// </summary>
        private IProperty _opposite;
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        private Nullable<bool> _isOrdered = false;
        
        /// <summary>
        /// The backing field for the IsUnique property
        /// </summary>
        private Nullable<bool> _isUnique = true;
        
        /// <summary>
        /// The backing field for the Lower property
        /// </summary>
        private Nullable<int> _lower = 1;
        
        /// <summary>
        /// The backing field for the Upper property
        /// </summary>
        private Nullable<int> _upper = 1;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The default property
        /// </summary>
        [XmlElementNameAttribute("default")]
        [XmlAttributeAttribute(true)]
        public virtual string Default
        {
            get
            {
                return this._default;
            }
            set
            {
                if ((this._default != value))
                {
                    this.OnDefaultChanging(EventArgs.Empty);
                    this.OnPropertyChanging("Default");
                    string old = this._default;
                    this._default = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDefaultChanged(e);
                    this.OnPropertyChanged("Default", e);
                }
            }
        }
        
        /// <summary>
        /// The isComposite property
        /// </summary>
        [DefaultValueAttribute(false)]
        [XmlElementNameAttribute("isComposite")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> IsComposite
        {
            get
            {
                return this._isComposite;
            }
            set
            {
                if ((this._isComposite != value))
                {
                    this.OnIsCompositeChanging(EventArgs.Empty);
                    this.OnPropertyChanging("IsComposite");
                    Nullable<bool> old = this._isComposite;
                    this._isComposite = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsCompositeChanged(e);
                    this.OnPropertyChanged("IsComposite", e);
                }
            }
        }
        
        /// <summary>
        /// The isDerived property
        /// </summary>
        [DefaultValueAttribute(false)]
        [XmlElementNameAttribute("isDerived")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> IsDerived
        {
            get
            {
                return this._isDerived;
            }
            set
            {
                if ((this._isDerived != value))
                {
                    this.OnIsDerivedChanging(EventArgs.Empty);
                    this.OnPropertyChanging("IsDerived");
                    Nullable<bool> old = this._isDerived;
                    this._isDerived = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsDerivedChanged(e);
                    this.OnPropertyChanged("IsDerived", e);
                }
            }
        }
        
        /// <summary>
        /// The isID property
        /// </summary>
        [XmlElementNameAttribute("isID")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> IsID
        {
            get
            {
                return this._isID;
            }
            set
            {
                if ((this._isID != value))
                {
                    this.OnIsIDChanging(EventArgs.Empty);
                    this.OnPropertyChanging("IsID");
                    Nullable<bool> old = this._isID;
                    this._isID = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsIDChanged(e);
                    this.OnPropertyChanged("IsID", e);
                }
            }
        }
        
        /// <summary>
        /// The isReadOnly property
        /// </summary>
        [DefaultValueAttribute(false)]
        [XmlElementNameAttribute("isReadOnly")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> IsReadOnly
        {
            get
            {
                return this._isReadOnly;
            }
            set
            {
                if ((this._isReadOnly != value))
                {
                    this.OnIsReadOnlyChanging(EventArgs.Empty);
                    this.OnPropertyChanging("IsReadOnly");
                    Nullable<bool> old = this._isReadOnly;
                    this._isReadOnly = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsReadOnlyChanged(e);
                    this.OnPropertyChanged("IsReadOnly", e);
                }
            }
        }
        
        /// <summary>
        /// The class property
        /// </summary>
        [XmlElementNameAttribute("class")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedAttribute")]
        public virtual LL.MDE.Components.Qvt.Metamodel.EMOF.IClass Class
        {
            get
            {
                return ModelHelper.CastAs<LL.MDE.Components.Qvt.Metamodel.EMOF.IClass>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The opposite property
        /// </summary>
        [XmlElementNameAttribute("opposite")]
        [XmlAttributeAttribute(true)]
        public virtual IProperty Opposite
        {
            get
            {
                return this._opposite;
            }
            set
            {
                if ((this._opposite != value))
                {
                    this.OnOppositeChanging(EventArgs.Empty);
                    this.OnPropertyChanging("Opposite");
                    IProperty old = this._opposite;
                    this._opposite = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpposite;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpposite;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOppositeChanged(e);
                    this.OnPropertyChanged("Opposite", e);
                }
            }
        }
        
        /// <summary>
        /// The isOrdered property
        /// </summary>
        [DefaultValueAttribute(false)]
        [XmlElementNameAttribute("isOrdered")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((this._isOrdered != value))
                {
                    this.OnIsOrderedChanging(EventArgs.Empty);
                    this.OnPropertyChanging("IsOrdered");
                    Nullable<bool> old = this._isOrdered;
                    this._isOrdered = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsOrderedChanged(e);
                    this.OnPropertyChanged("IsOrdered", e);
                }
            }
        }
        
        /// <summary>
        /// The isUnique property
        /// </summary>
        [DefaultValueAttribute(true)]
        [XmlElementNameAttribute("isUnique")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> IsUnique
        {
            get
            {
                return this._isUnique;
            }
            set
            {
                if ((this._isUnique != value))
                {
                    this.OnIsUniqueChanging(EventArgs.Empty);
                    this.OnPropertyChanging("IsUnique");
                    Nullable<bool> old = this._isUnique;
                    this._isUnique = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsUniqueChanged(e);
                    this.OnPropertyChanged("IsUnique", e);
                }
            }
        }
        
        /// <summary>
        /// The lower property
        /// </summary>
        [DefaultValueAttribute(1)]
        [XmlElementNameAttribute("lower")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Lower
        {
            get
            {
                return this._lower;
            }
            set
            {
                if ((this._lower != value))
                {
                    this.OnLowerChanging(EventArgs.Empty);
                    this.OnPropertyChanging("Lower");
                    Nullable<int> old = this._lower;
                    this._lower = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowerChanged(e);
                    this.OnPropertyChanged("Lower", e);
                }
            }
        }
        
        /// <summary>
        /// The upper property
        /// </summary>
        [DefaultValueAttribute(1)]
        [XmlElementNameAttribute("upper")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Upper
        {
            get
            {
                return this._upper;
            }
            set
            {
                if ((this._upper != value))
                {
                    this.OnUpperChanging(EventArgs.Empty);
                    this.OnPropertyChanging("Upper");
                    Nullable<int> old = this._upper;
                    this._upper = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUpperChanged(e);
                    this.OnPropertyChanged("Upper", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PropertyReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired before the Default property changes its value
        /// </summary>
        public event EventHandler DefaultChanging;
        
        /// <summary>
        /// Gets fired when the Default property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DefaultChanged;
        
        /// <summary>
        /// Gets fired before the IsComposite property changes its value
        /// </summary>
        public event EventHandler IsCompositeChanging;
        
        /// <summary>
        /// Gets fired when the IsComposite property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsCompositeChanged;
        
        /// <summary>
        /// Gets fired before the IsDerived property changes its value
        /// </summary>
        public event EventHandler IsDerivedChanging;
        
        /// <summary>
        /// Gets fired when the IsDerived property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsDerivedChanged;
        
        /// <summary>
        /// Gets fired before the IsID property changes its value
        /// </summary>
        public event EventHandler IsIDChanging;
        
        /// <summary>
        /// Gets fired when the IsID property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsIDChanged;
        
        /// <summary>
        /// Gets fired before the IsReadOnly property changes its value
        /// </summary>
        public event EventHandler IsReadOnlyChanging;
        
        /// <summary>
        /// Gets fired when the IsReadOnly property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsReadOnlyChanged;
        
        /// <summary>
        /// Gets fired when the Class property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ClassChanged;
        
        /// <summary>
        /// Gets fired before the Opposite property changes its value
        /// </summary>
        public event EventHandler OppositeChanging;
        
        /// <summary>
        /// Gets fired when the Opposite property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OppositeChanged;
        
        /// <summary>
        /// Gets fired before the IsOrdered property changes its value
        /// </summary>
        public event EventHandler IsOrderedChanging;
        
        /// <summary>
        /// Gets fired when the IsOrdered property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsOrderedChanged;
        
        /// <summary>
        /// Gets fired before the IsUnique property changes its value
        /// </summary>
        public event EventHandler IsUniqueChanging;
        
        /// <summary>
        /// Gets fired when the IsUnique property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsUniqueChanged;
        
        /// <summary>
        /// Gets fired before the Lower property changes its value
        /// </summary>
        public event EventHandler LowerChanging;
        
        /// <summary>
        /// Gets fired when the Lower property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> LowerChanged;
        
        /// <summary>
        /// Gets fired before the Upper property changes its value
        /// </summary>
        public event EventHandler UpperChanging;
        
        /// <summary>
        /// Gets fired when the Upper property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> UpperChanged;
        
        /// <summary>
        /// Raises the DefaultChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.DefaultChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DefaultChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsCompositeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsCompositeChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.IsCompositeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsCompositeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsCompositeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsCompositeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsDerivedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDerivedChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.IsDerivedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsDerivedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDerivedChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsDerivedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsIDChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.IsIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsIDChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsReadOnlyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsReadOnlyChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.IsReadOnlyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsReadOnlyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsReadOnlyChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsReadOnlyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ClassChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            LL.MDE.Components.Qvt.Metamodel.EMOF.IClass oldClass = ModelHelper.CastAs<LL.MDE.Components.Qvt.Metamodel.EMOF.IClass>(oldParent);
            LL.MDE.Components.Qvt.Metamodel.EMOF.IClass newClass = ModelHelper.CastAs<LL.MDE.Components.Qvt.Metamodel.EMOF.IClass>(newParent);
            if ((oldClass != null))
            {
                oldClass.OwnedAttribute.Remove(this);
            }
            if ((newClass != null))
            {
                newClass.OwnedAttribute.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldClass, newClass);
            this.OnClassChanged(e);
            this.OnPropertyChanged("Class", e);
        }
        
        /// <summary>
        /// Raises the OppositeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppositeChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.OppositeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OppositeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppositeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OppositeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Opposite property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpposite(object sender, System.EventArgs eventArgs)
        {
            this.Opposite = null;
        }
        
        /// <summary>
        /// Raises the IsOrderedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.IsOrderedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsOrderedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsOrderedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsUniqueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.IsUniqueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsUniqueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsUniqueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.LowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.LowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperChanging(EventArgs eventArgs)
        {
            EventHandler handler = this.UpperChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.UpperChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DEFAULT"))
            {
                return this.Default;
            }
            if ((attribute == "ISCOMPOSITE"))
            {
                return this.IsComposite;
            }
            if ((attribute == "ISDERIVED"))
            {
                return this.IsDerived;
            }
            if ((attribute == "ISID"))
            {
                return this.IsID;
            }
            if ((attribute == "ISREADONLY"))
            {
                return this.IsReadOnly;
            }
            if ((attribute == "ISORDERED"))
            {
                return this.IsOrdered;
            }
            if ((attribute == "ISUNIQUE"))
            {
                return this.IsUnique;
            }
            if ((attribute == "LOWER"))
            {
                return this.Lower;
            }
            if ((attribute == "UPPER"))
            {
                return this.Upper;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CLASS"))
            {
                this.Class = ((LL.MDE.Components.Qvt.Metamodel.EMOF.IClass)(value));
                return;
            }
            if ((feature == "OPPOSITE"))
            {
                this.Opposite = ((IProperty)(value));
                return;
            }
            if ((feature == "DEFAULT"))
            {
                this.Default = ((string)(value));
                return;
            }
            if ((feature == "ISCOMPOSITE"))
            {
                this.IsComposite = ((bool)(value));
                return;
            }
            if ((feature == "ISDERIVED"))
            {
                this.IsDerived = ((bool)(value));
                return;
            }
            if ((feature == "ISID"))
            {
                this.IsID = ((bool)(value));
                return;
            }
            if ((feature == "ISREADONLY"))
            {
                this.IsReadOnly = ((bool)(value));
                return;
            }
            if ((feature == "ISORDERED"))
            {
                this.IsOrdered = ((bool)(value));
                return;
            }
            if ((feature == "ISUNIQUE"))
            {
                this.IsUnique = ((bool)(value));
                return;
            }
            if ((feature == "LOWER"))
            {
                this.Lower = ((int)(value));
                return;
            }
            if ((feature == "UPPER"))
            {
                this.Upper = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CLASS"))
            {
                return new ClassProxy(this);
            }
            if ((attribute == "OPPOSITE"))
            {
                return new OppositeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CLASS"))
            {
                return new ClassProxy(this);
            }
            if ((reference == "OPPOSITE"))
            {
                return new OppositeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            throw new NotSupportedException();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Property class
        /// </summary>
        public class PropertyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Property _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PropertyReferencedElementsCollection(Property parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Class != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Opposite != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ClassChanged += this.PropagateValueChanges;
                this._parent.OppositeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ClassChanged -= this.PropagateValueChanges;
                this._parent.OppositeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Class == null))
                {
                    LL.MDE.Components.Qvt.Metamodel.EMOF.IClass classCasted = item.As<LL.MDE.Components.Qvt.Metamodel.EMOF.IClass>();
                    if ((classCasted != null))
                    {
                        this._parent.Class = classCasted;
                        return;
                    }
                }
                if ((this._parent.Opposite == null))
                {
                    IProperty oppositeCasted = item.As<IProperty>();
                    if ((oppositeCasted != null))
                    {
                        this._parent.Opposite = oppositeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Class = null;
                this._parent.Opposite = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Class))
                {
                    return true;
                }
                if ((item == this._parent.Opposite))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Class != null))
                {
                    array[arrayIndex] = this._parent.Class;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Opposite != null))
                {
                    array[arrayIndex] = this._parent.Opposite;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Class == item))
                {
                    this._parent.Class = null;
                    return true;
                }
                if ((this._parent.Opposite == item))
                {
                    this._parent.Opposite = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Class).Concat(this._parent.Opposite).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the default property
        /// </summary>
        private sealed class DefaultProxy : ModelPropertyChange<IProperty, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultProxy(IProperty modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Default;
                }
                set
                {
                    this.ModelElement.Default = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DefaultChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DefaultChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isComposite property
        /// </summary>
        private sealed class IsCompositeProxy : ModelPropertyChange<IProperty, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsCompositeProxy(IProperty modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsComposite;
                }
                set
                {
                    this.ModelElement.IsComposite = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsCompositeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsCompositeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDerived property
        /// </summary>
        private sealed class IsDerivedProxy : ModelPropertyChange<IProperty, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDerivedProxy(IProperty modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsDerived;
                }
                set
                {
                    this.ModelElement.IsDerived = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsDerivedChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsDerivedChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isID property
        /// </summary>
        private sealed class IsIDProxy : ModelPropertyChange<IProperty, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsIDProxy(IProperty modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsID;
                }
                set
                {
                    this.ModelElement.IsID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsIDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsIDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isReadOnly property
        /// </summary>
        private sealed class IsReadOnlyProxy : ModelPropertyChange<IProperty, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsReadOnlyProxy(IProperty modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsReadOnly;
                }
                set
                {
                    this.ModelElement.IsReadOnly = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsReadOnlyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsReadOnlyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the class property
        /// </summary>
        private sealed class ClassProxy : ModelPropertyChange<IProperty, LL.MDE.Components.Qvt.Metamodel.EMOF.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassProxy(IProperty modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override LL.MDE.Components.Qvt.Metamodel.EMOF.IClass Value
            {
                get
                {
                    return this.ModelElement.Class;
                }
                set
                {
                    this.ModelElement.Class = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the opposite property
        /// </summary>
        private sealed class OppositeProxy : ModelPropertyChange<IProperty, IProperty>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OppositeProxy(IProperty modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProperty Value
            {
                get
                {
                    return this.ModelElement.Opposite;
                }
                set
                {
                    this.ModelElement.Opposite = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OppositeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OppositeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<IMultiplicityElement, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(IMultiplicityElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsOrderedChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsOrderedChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<IMultiplicityElement, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsUniqueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsUniqueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lower property
        /// </summary>
        private sealed class LowerProxy : ModelPropertyChange<IMultiplicityElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerProxy(IMultiplicityElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Lower;
                }
                set
                {
                    this.ModelElement.Lower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upper property
        /// </summary>
        private sealed class UpperProxy : ModelPropertyChange<IMultiplicityElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperProxy(IMultiplicityElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Upper;
                }
                set
                {
                    this.ModelElement.Upper = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UpperChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UpperChanged -= handler;
            }
        }
    }
}

