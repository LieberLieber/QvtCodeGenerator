// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace LL.MDE.Components.Qvt.QvtCodeGenerator.Templates
{
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
    using LL.MDE.Components.Qvt.Metamodel.QVTBase;
    using LL.MDE.Components.Qvt.Metamodel.QVTRelations;
    using LL.MDE.Components.Qvt.Metamodel.QVTTemplate;
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class TransformationTemplate : TransformationTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing LL." +
                    "MDE.Components.Qvt.Common;\r\n");
            
            #line 17 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"

    RelationalTransformation transformation = this.transformation;

    ISet<TypedModel> validCheckTargetParams = new HashSet<TypedModel>();
    ISet<TypedModel> validEnforceTargetParams = new HashSet<TypedModel>();

    // foreach (var param in transformation.modelParameter) 
    // {
    foreach (Relation relation in transformation.rule)
    {
        foreach (RelationDomain domain in relation.domain)
        {
            if (Validator.IsValidTargetDomain(domain) && transformation.modelParameter.Contains(domain.typedModel))
            {
                if (domain.isCheckable)
                    validCheckTargetParams.Add(domain.typedModel);
                if (domain.isEnforceable)
                    validEnforceTargetParams.Add(domain.typedModel);
            }
        }

        //}
    }
    
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 42 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 // For each package of each metamodel used in the transformation
    foreach (Package package in transformation.modelParameter.Select(p => p.usedPackage).SelectMany(i => i).Distinct())
    { 
            
            #line default
            #line hidden
            this.Write("\r\nusing ");
            
            #line 46 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(package.name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 48 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 50 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 // Generation of the namespace 
            
            #line default
            #line hidden
            
            #line 51 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.Namespace(transformation)));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\r\n\r\n\r\n\r\n");
            
            #line 57 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 //================================================== 
            
            #line default
            #line hidden
            
            #line 58 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 //============== BEGIN OF MATCH CLASSES ============ 
            
            #line default
            #line hidden
            
            #line 59 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 //================================================== 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n\r\n\tpublic abstract class ");
            
            #line 64 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(transformation)));
            
            #line default
            #line hidden
            this.Write(" : Match {}\r\n\r\n\t\r\n");
            
            #line 67 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 // For each relation, we create a Match class
    foreach (Relation relation in transformation.rule)
    { 
            
            #line default
            #line hidden
            this.Write("\r\n\tpublic class ");
            
            #line 71 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(relation)));
            
            #line default
            #line hidden
            this.Write(" :  ");
            
            #line 71 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(transformation)));
            
            #line default
            #line hidden
            this.Write(" {\r\n\r\n\t\t// Domains root variables\r\n");
            
            #line 74 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 //For each domain of the relation, we create a field for its root variable
        foreach (RelationDomain domain in relation.domain)
        { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 77 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EMOFHelper.getTypeName(domain.rootVariable.type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 77 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domain.rootVariable.name));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 78 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t// Other variables\r\n");
            
            #line 81 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 // For each other variable of the relation (ie non-root), we do the same
        foreach (Variable variable in relation.variable.FindAll(v => !relation.domain.Select(d => d.rootVariable).Contains(v)))
        { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 84 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EMOFHelper.getTypeName(variable.type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 84 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.name));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 85 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t//protected override void ReCheck() {} //TODO\r\n\t}\r\n\r\n");
            
            #line 90 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } //End foreach (Relation), Match class creation 
            
            #line default
            #line hidden
            this.Write("\r\n\t\r\n\r\n");
            
            #line 94 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 //================================================================================ 
            
            #line default
            #line hidden
            
            #line 95 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 //============== END OF MATCH CLASSES / BEGIN OF TRANSFORMATION CLASS ============ 
            
            #line default
            #line hidden
            
            #line 96 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 //================================================================================ 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n\tpublic class Transformation");
            
            #line 100 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(transformation.name));
            
            #line default
            #line hidden
            this.Write(" : GeneratedTransformation {\r\n\r\n\t\tprivate ModelEditor editor;\r\n\t\t\r\n");
            
            #line 104 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 // For each param of the transformation, we prepare an ISet<Object> field containing the model
    foreach (TypedModel param in transformation.modelParameter)
    { 
            
            #line default
            #line hidden
            this.Write("\t\t//public ISet<object> ");
            
            #line 107 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.TypedModelVariableName(param)));
            
            #line default
            #line hidden
            this.Write(" = new HashSet<object>();\r\n");
            
            #line 108 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 111 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 // And "setters"
    foreach (TypedModel param in transformation.modelParameter)
    { 
            
            #line default
            #line hidden
            this.Write("\t\t/*public void ");
            
            #line 114 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.SetParamMethodName(param)));
            
            #line default
            #line hidden
            this.Write(" (ISet<object> model) {\r\n\t\t\t");
            
            #line 115 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.TypedModelVariableName(param)));
            
            #line default
            #line hidden
            this.Write(".Clear();\r\n\t\t\t");
            
            #line 116 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.TypedModelVariableName(param)));
            
            #line default
            #line hidden
            this.Write(".UnionWith(model);\r\n\t\t }*/\r\n");
            
            #line 118 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n\r\n        /*public override List<Match> EnforceTowards(string parameterName" +
                    ") {\r\n\r\n\t\t\t\tswitch (parameterName)\r\n            {\r\n ");
            
            #line 127 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
	foreach (TypedModel param in validEnforceTargetParams)
{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 129 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param.name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn ");
            
            #line 130 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.EnforceTowardsMethodName(param)));
            
            #line default
            #line hidden
            this.Write("().OfType<Match>().ToList();\r\n");
            
            #line 131 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t default:\r\n                    return null;\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n        /*public " +
                    "override void SetParam(string parameterName, ISet<object> model) {\r\n\r\n\t\t\t\tswitch" +
                    " (parameterName)\r\n            {\r\n ");
            
            #line 141 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
	foreach (TypedModel param in transformation.modelParameter)
{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 143 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param.name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\t");
            
            #line 144 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.SetParamMethodName(param)));
            
            #line default
            #line hidden
            this.Write("(model);\r\n\t\t\t\t\tbreak;\r\n");
            
            #line 146 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"			}

		}*/

		/*public override bool CheckConformity() {
			return true; //TODO check instanceof with all metaclasses
		}*/
		
		public override void CallTopRelation(string topRelationName, List<object> parameters) {
			//TODO
		}


		/*public override List<Match> Check() {
			// Call each top relation in both directions
			List<Match> result = new List<Match>();
			");
            
            #line 163 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 // For each top Relation, we call the corresponding enforce
    foreach (Relation relation in transformation.rule.FindAll(r => r.isTopLevel))
    {
        foreach (TypedModel targetModel in transformation.modelParameter)
        {
        
            
            #line default
            #line hidden
            this.Write("\t\t\tresult.AddRange(");
            
            #line 169 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationCheckTowards(relation, targetModel)));
            
            #line default
            #line hidden
            this.Write("());\r\n");
            
            #line 170 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
      } // end  foreach TypedModel
} // end foreach top relation 
            
            #line default
            #line hidden
            this.Write("\t\t    return result;\r\n\t\t}*/\r\n\r\n\r\n\r\n");
            
            #line 177 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 
 foreach (TypedModel targetModel in transformation.modelParameter)
 {

     // We only create the enforce method if there is at least one relation that can enforce in this direction
     // TODO maybe only top relations should be checked
     if (transformation.rule.Exists(r => r.domain.Exists(d => d.isEnforceable && d.typedModel == targetModel)))
     { 
            
            #line default
            #line hidden
            this.Write("\t\t/*public List< ");
            
            #line 185 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(transformation)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 185 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.EnforceTowardsMethodName(targetModel)));
            
            #line default
            #line hidden
            this.Write("() {\r\n\t\t\tList< ");
            
            #line 186 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(transformation)));
            
            #line default
            #line hidden
            this.Write("> result = new List< ");
            
            #line 186 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(transformation)));
            
            #line default
            #line hidden
            this.Write(">();\r\n");
            
            #line 187 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 // For each top Relation, we call the corresponding enforce
         foreach (Relation relation in transformation.rule.FindAll(r => r.isTopLevel && r.domain.Exists(domain => domain.typedModel == targetModel)))
         { 
            
            #line default
            #line hidden
            this.Write("\t\t\tresult.AddRange(");
            
            #line 190 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationEnforceTowards(relation, targetModel)));
            
            #line default
            #line hidden
            this.Write("());\r\n");
            
            #line 191 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } // end foreach top relation 
            
            #line default
            #line hidden
            this.Write("\t\t    return result;\r\n\t\t}*/\r\n");
            
            #line 194 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } // end if 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 196 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } // end  foreach (TypedModel)
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 198 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 // For each Relation, we generate check and enforce methods
    foreach (Relation relation in transformation.rule)
    { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t// ---------- Start ");
            
            #line 202 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.name));
            
            #line default
            #line hidden
            this.Write(" methods ----------- \r\n\r\n");
            
            #line 204 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 // For each transfo target we generate a check method and an enforce method (if enforce possible)
		foreach (TypedModel targetParam in transformation.modelParameter)
		{
		    List<RelationDomain> targetDomains = relation.domain.FindAll(d => d.typedModel == targetParam);
			if (Validator.AreValidTargetDomains(targetDomains)) {
            
            #line default
            #line hidden
            this.Write("\r\n\t");
            
            #line 210 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 ICollection<RelationDomain> sources = Validator.GetValidSourcesOfDomains(targetDomains); 
		ISet<Variable> variablesBindedSoFar = new HashSet<Variable>();
            
            #line default
            #line hidden
            this.Write("\r\n\t\tprivate static List<");
            
            #line 213 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(relation)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 213 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationMatchSourceTowards(relation,targetParam)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 213 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",sources.Select(d=>d.rootVariable.type.name + " "+ d.rootVariable.name))));
            
            #line default
            #line hidden
            this.Write(") {\r\n\t\t\tList<");
            
            #line 214 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(relation)));
            
            #line default
            #line hidden
            this.Write("> result = new List<");
            
            #line 214 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(relation)));
            
            #line default
            #line hidden
            this.Write(">();\r\n\t\t\t");
            
            #line 215 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TransformationTemplateHelper.GenerateFindSourcePreMatches(sources, targetDomains,variablesBindedSoFar)));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t");
            
            #line 219 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 var variablesBindedInSource = new HashSet<Variable>();
		variablesBindedInSource.UnionWith(variablesBindedSoFar);
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\t\tprivate static void ");
            
            #line 223 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationMatchTargetTowards(relation,targetParam)));
            
            #line default
            #line hidden
            this.Write("( ");
            
            #line 223 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(relation)));
            
            #line default
            #line hidden
            this.Write(" match, ");
            
            #line 223 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",targetDomains.Select(d=>d.rootVariable.type.name + " "+ d.rootVariable.name))));
            
            #line default
            #line hidden
            this.Write(") {\r\n\t\t\t");
            
            #line 224 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TransformationTemplateHelper.GenerateFindTargetPreMatches(sources, targetDomains,variablesBindedSoFar)));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t}\r\n\r\n\r\n\t\t");
            
            #line 228 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.isTopLevel ? "public": "private"));
            
            #line default
            #line hidden
            this.Write(" static List< ");
            
            #line 228 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(relation)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 228 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationCheckTowards(relation, targetParam)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 228 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",relation.domain.Select(d=>d.rootVariable.type.name + " "+ d.rootVariable.name))));
            
            #line default
            #line hidden
            this.Write(") {\r\n\t\r\n\t\t\tList<");
            
            #line 230 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(relation)));
            
            #line default
            #line hidden
            this.Write("> result = ");
            
            #line 230 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationMatchSourceTowards(relation,targetParam)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 230 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",sources.Select(d=>d.rootVariable.name))));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\tforeach (var match in result)\r\n            {\r\n\t\t\t\t");
            
            #line 233 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationMatchTargetTowards(relation,targetParam)));
            
            #line default
            #line hidden
            this.Write("(match, ");
            
            #line 233 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",targetDomains.Select(d=> d.rootVariable.name))));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n\t\t    return result;\r\n\t\t}\r\n\r\n\r\n");
            
            #line 239 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 if (targetDomains.TrueForAll(d => d.isEnforceable))
{ 
            
            #line default
            #line hidden
            this.Write("   \r\n   \t\t");
            
            #line 242 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.isTopLevel ? "public": "private"));
            
            #line default
            #line hidden
            this.Write(" List<");
            
            #line 242 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(relation)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 242 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationEnforceTowards(relation, targetParam)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 242 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",relation.domain.Select(d=>d.rootVariable.type.name + " "+ d.rootVariable.name))));
            
            #line default
            #line hidden
            this.Write(") {\r\n\t\t\tList<");
            
            #line 243 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchClassName(relation)));
            
            #line default
            #line hidden
            this.Write("> result = ");
            
            #line 243 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationCheckTowards(relation, targetParam)));
            
            #line default
            #line hidden
            this.Write(" (");
            
            #line 243 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",relation.domain.Select(d=>d.rootVariable.name))));
            
            #line default
            #line hidden
            this.Write(");\r\n            foreach (var match in result.FindAll(m => !m.found))\r\n           " +
                    " {\r\n                // Extracting variables binded in source\r\n                ");
            
            #line 247 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TransformationTemplateHelper.GenerateExtractVariablesFromMatch(variablesBindedInSource)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\t\t\t\t\r\n\t\t\t\t");
            
            #line 250 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TransformationTemplateHelper.GenerateConstructTarget(targetDomains)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n\r\n            }\r\n\r\n\t\t    return result;\r\n\t\t}\r\n\r\n\r\n\r\n\r\n");
            
            #line 262 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } // End if (isEnforceable) 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 264 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } // End if valid target domains 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 266 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } // End foreach (targetDomain) 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 269 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 var uniqueEnforceable = relation.domain.Single(d => d.isEnforceable);
        if (uniqueEnforceable != null)
        { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic void ");
            
            #line 273 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TransformationTemplateHelper.ToFirstUpper(relation.name)));
            
            #line default
            #line hidden
            this.Write(" (");
            
            #line 273 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",relation.domain.Select(d=>d.rootVariable.type.name + " "+ d.rootVariable.name))));
            
            #line default
            #line hidden
            this.Write(") \r\n\t\t{\r\n\t\t\t");
            
            #line 275 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationEnforceTowards(relation,uniqueEnforceable.typedModel)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 275 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",relation.domain.Select(d=>d.rootVariable.name))));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t}\r\n            \r\n       ");
            
            #line 278 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 }
 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t// ---------- End ");
            
            #line 281 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relation.name));
            
            #line default
            #line hidden
            this.Write(" methods ----------- \r\n");
            
            #line 282 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 } // End foreach (Relation) 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 285 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 //================================================================= 
            
            #line default
            #line hidden
            
            #line 286 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 //================= END OF TRANSFORMATION CLASS =================== 
            
            #line default
            #line hidden
            
            #line 287 "C:\Users\ebousse\Source\Repos\ChristianDopplerLabors\Software\QvtEnginePerformance\trunk\src\LL.MDE.Components.Qvt.CodeGenerator\Templates\TransformationTemplate.tt"
 //================================================================= 
            
            #line default
            #line hidden
            this.Write("\r\n\t} // end class\r\n} // end namespace");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class TransformationTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
