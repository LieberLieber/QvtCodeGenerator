<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="LL.MDE.Components.Qvt.Common" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.CustomExtensions.EMOFExtensions" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.QVTTemplate" #>
<#@ import namespace="LL.MDE.Components.Qvt.QvtCodeGenerator.Analysis" #>
<#@ import namespace="LL.MDE.Components.Qvt.QvtCodeGenerator.CodeGeneration" #>
<#@ import namespace="LL.MDE.Components.Qvt.QvtCodeGenerator.CodeGeneration.RelationTemplate" #>
<#@ import namespace="LL.MDE.Components.Qvt.QvtCodeGenerator.Utils" #>
<#@ import namespace="NMF.Utilities" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.EssentialOCL" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.QVTBase" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.QVTRelation" #> 

<#@ output extension=".cs" #>

<#+


    public void GenerateDictionnaryClass(IRelation relation, IList<IRelationDomain> domains, bool checkOnly)
    {
        string dictTypes = string.Join(",", domains.Select(d => d.RootVariable.Type.Name));

        string className = checkOnly ? "CheckOnlyDomains" : "EnforceDomains";
        #>public class <#=className #> : Tuple<<#=dictTypes #>>
		{<#+ 

	foreach (IRelationDomain dictVariable in domains)
	{
	    #>public <#= dictVariable.RootVariable.Type.Name #> <#= dictVariable.RootVariable.Name #>  { get { return Item<#=  domains.IndexOf(dictVariable) + 1 #>; } } <#+
	}
        RelationTemplateHelper.GenerateRelationParams(true, relation, null, true, false);
        string paramsWithType = string.Join(",",domains.Select(d => d.RootVariable.Type.Name + " " + d.RootVariable.Name));
        string paramsWithoutType = string.Join(",",domains.Select(d => d.RootVariable.Name));
        #>public <#=className #>(<#=paramsWithType #>) : base(<#=paramsWithoutType #>){}
	}<#+
    }


    public void GenerateDictionnaryClasses(IRelation relation)
    {
        IList<IRelationDomain> dictVariableCheck = relation.Domain.OfType<IRelationDomain>().Where(d => !d.IsEnforceable.GetValueOrDefault()).ToList();
        IList<IRelationDomain> dictVariablesEnforce = relation.Domain.OfType<IRelationDomain>().Where(d => d.IsEnforceable.GetValueOrDefault()).ToList();
        GenerateDictionnaryClass(relation, dictVariableCheck, true);
        GenerateDictionnaryClass(relation, dictVariablesEnforce, false);
    }

    public void GenerateFindPreviousResultMethod(IRelation relation)
    {
        #>public EnforceDomains FindPreviousResult(<#= RelationTemplateHelper.GenerateRelationParamsCheckonly(true,relation) #>)
		{
		CheckOnlyDomains input = new CheckOnlyDomains(<#= RelationTemplateHelper.GenerateRelationParamsCheckonly(false,relation) #>);
		return traceabilityMap.ContainsKey(input) ? traceabilityMap[input] : null;
	}<#+
    }

    public void GenerateMatchClasses(IRelation relation, RelationAnalysisResult analysisResult)
    {
        foreach (IRelationDomain domain in relation.Domain.OfType<IRelationDomain>().Where(d => d.TypedModel != null))
        {
            DomainVariablesBindingsResult domainAnalysisResult = analysisResult.GetResultOf(domain);

            // Domain match Class declaration
            #>internal class <#= QvtCodeGeneratorStrings.MatchDomainClassName(domain) #> {<#+
		
        foreach (IVariable variableItCanBind in  domainAnalysisResult.VariablesItCanBind)
        {
            #>public <#=variableItCanBind.Type.GetRealTypeName() #> <#= variableItCanBind.Name #>;
			<#+
        } 

		#>}<#+
        }

        // Check result Class declaration
        #>internal class <#=QvtCodeGeneratorStrings.CheckResultClassName(relation) #>  {<#+

	foreach (IRelationDomain domain in relation.Domain.OfType<IRelationDomain>().Where(d => !d.IsEnforceable.GetValueOrDefault() && (d.TypedModel != null)))
	{
	    #>public <#=QvtCodeGeneratorStrings.MatchDomainClassName(domain) #> matchDomain<#=Util.ToFirstUpper(domain.RootVariable.Name) #>;
		<#+
	} 

	#>}<#+
    }

	public void GenerateDomainCheckMethod(IRelationDomain domain, DomainVariablesBindingsResult analysisResult)
	{
	    ISet<IVariable> bindedSoFar = new HashSet<IVariable>();
	    #>internal static ISet<<#=QvtCodeGeneratorStrings.MatchDomainClassName(domain) #>> <#= QvtCodeGeneratorStrings.CheckDomainMethodName(domain) #> (<#=domain.RootVariable.Type.GetRealTypeName() #> <#= domain.RootVariable.Name #>) {
			ISet<<#= QvtCodeGeneratorStrings.MatchDomainClassName(domain) #>> result = new HashSet<<#= QvtCodeGeneratorStrings.MatchDomainClassName(domain) #>>();
			<#= RelationTemplateHelper.GenerateDomainCheckMethodContent(domain, bindedSoFar, analysisResult) #>
			return result;
		}<#+
	}

	public void GenerateEnforceDomainMethods(IRelation relation, ITypedModel targetParam, RelationAnalysisResult analysisResult, bool useMetamodelInterface)
	{
	    List<IRelationDomain> targetDomains = relation.Domain.Where(d => d.IsEnforceable.GetValueOrDefault() && d.TypedModel == targetParam).OfType<IRelationDomain>().ToList();
		List<IRelationDomain> sourceDomains = relation.Domain.Where(d => !targetDomains.Contains(d)).OfType<IRelationDomain>().ToList();
		ISet<IVariable> bindedSoFar = new HashSet<IVariable>();
		  ISet<IRelationCallExp> relationCallsWhen = new HashSet<IRelationCallExp>();
		if (relation.When != null)
        {
            relationCallsWhen.AddRange(relation.When.Predicate.Select(p => p.ConditionExpression).OfType<IRelationCallExp>());
        }
	    foreach (IRelationDomain targetDomain in targetDomains)
	    {
	        DomainVariablesBindingsResult targetDomainAnalysisResult = analysisResult.GetResultOf(targetDomain);
			IList<string> args = new List<string>();
			args.AddRange(targetDomainAnalysisResult.VariablesRequired().Select(v => v.Type.GetRealTypeName() + " " + v.Name));
	        args.Add(targetDomain.RootVariable.Type.GetRealTypeName() + " " + targetDomain.RootVariable.Name);
	        #>internal <#=QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain) #>  <#=QvtCodeGeneratorStrings.EnforceDomainMethodName(targetDomain) #> (<#= QvtCodeGeneratorStrings.CheckResultClassName(relation)#> checkresult, <#= string.Join(",",args ) #>) {
				<#= QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain) #> match = new <#= QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain) #>();<#+


				foreach (IRelationDomain sourceDomain in sourceDomains.Where(d=>d.TypedModel != null))
				{
					string bindingsContainer = "checkresult." + QvtCodeGeneratorStrings.MatchDomainFieldName(sourceDomain);
					#><#=RelationTemplateHelper.GenerateExtractVariablesFromMatch(analysisResult.GetResultOf(sourceDomain), bindedSoFar, bindingsContainer, true) #>
					<#+
				}

				
				// Generating calls to when relations, if needed
				if (!relationCallsWhen.IsNullOrEmpty())
				{
					#>// Querying when relations and storing results <#+
					foreach (IRelationCallExp relationCallWhen in relationCallsWhen)
					{
					#>//var <#= QvtCodeGeneratorStrings.RelationClassName(relationCallWhen.ReferredRelation) #>Result =  <#=RelationTemplateHelper.GenerateAssignmentsFromRelationCall(relationCallWhen, useMetamodelInterface)#> ;
					<#+

					}
				}

				// TODO not construct objects when can be queried
				#><#= RelationTemplateHelper.GenerateConstructTarget(targetDomain, useMetamodelInterface) #>

				
				// Return newly binded variables
				<#+
	        foreach (IVariable variable in targetDomainAnalysisResult.VariablesItCanBind)
	        {
	            #>
				match.<#=variable.Name #>  = <#=variable.Name #>; 
				<#+
	        }
				#>return match;}<#+
	    }
	}

    public void GenerateCheckAndEnforceMethod(IRelation relation)
    {
        // Method signature
        #><#= relation.IsTopLevel.GetValueOrDefault(false) ? "public" : "internal" #> void CheckAndEnforce(<#= string.Join(",", relation.Domain.Cast<RelationDomain>().Select(d => d.RootVariable.Type.GetRealTypeName() + " " + d.RootVariable.Name)) #> ) { <#+

		IList<string> dictVariablesEnforce = relation.Domain.OfType<IRelationDomain>().Where(d => d.IsEnforceable.GetValueOrDefault()).Select(d=>d.RootVariable.Name).ToList();
		string enforceParams = string.Join(",",dictVariablesEnforce);
		#> 
		    CheckOnlyDomains input = new CheckOnlyDomains(<#= RelationTemplateHelper.GenerateRelationParamsCheckonly(false,relation) #>);
            EnforceDomains output = new EnforceDomains(<#= enforceParams #>);
		    if (traceabilityMap.ContainsKey(input) && !traceabilityMap[input].Equals(output))
		    {
		        throw new Exception("This relation has already been used with different enforced parameters!");
		    }
		    if (!traceabilityMap.ContainsKey(input))
		    {
                ISet<<#= QvtCodeGeneratorStrings.CheckResultClassName(relation) #>> result = <#= QvtCodeGeneratorStrings.CheckMethodName() #> (<#= RelationTemplateHelper.GenerateRelationParamsCheckonly(false, relation) #>);
                Enforce(result, <#= RelationTemplateHelper.GenerateRelationParamsEnforce(false, relation) #>);
		        traceabilityMap[input] = output;
		    }
			
		}<#+
    }

    public void GenerateEnforceMethod(IRelation relation, RelationAnalysisResult analysisResult, bool useMetamodelInterface)
    {
        List<IRelationDomain> targetDomains = relation.Domain.Where(d => d.IsEnforceable.GetValueOrDefault()).OfType<IRelationDomain>().ToList();
        List<IRelationDomain> sourceDomains = relation.Domain.Where(d => !targetDomains.Contains(d)).OfType<IRelationDomain>().ToList();
        ISet<IVariable> bindedSoFar = new HashSet<IVariable>();
      
        // Method declaration
        #>internal void Enforce (ISet<<#= QvtCodeGeneratorStrings.CheckResultClassName(relation) #>> result, <#= RelationTemplateHelper.GenerateRelationParamsEnforce(true, relation, bindedSoFar) #> ) {

		foreach (<#= QvtCodeGeneratorStrings.CheckResultClassName(relation) #> match in result)
		{
			// Extracting variables binded in source domains
			<#+
        // Generating the extraction of variables from the checking result
        foreach (IRelationDomain sourceDomain in sourceDomains)
        {
            string bindingsContainer = "match." + QvtCodeGeneratorStrings.MatchDomainFieldName(sourceDomain);
            #><#=RelationTemplateHelper.GenerateExtractVariablesFromMatch(analysisResult.GetResultOf(sourceDomain), bindedSoFar, bindingsContainer) #>
			<#+
        }



        // Generating assignments from where clause
        if (relation.Where != null)
        {
            #> 

		// Assigning variables binded in the where clause
		<#+
            foreach (Assignment assignment in relation.Where.Predicate.Select(p => p.ConditionExpression).OfType<Assignment>())
            {
                #><#= RelationTemplateHelper.GenerateExpression(assignment, useMetamodelInterface) + ";" #>
				<#+
            }
        }
        // Generating call to enforce methods of target domains
        #> 

		// Enforcing each enforced domain
		<#+
        foreach (IRelationDomain targetDomain in targetDomains)
        {
			
            DomainVariablesBindingsResult targetDomainAnalysisResult = analysisResult.GetResultOf(targetDomain);

			IList<string> args = new List<string>();
			args.AddRange(targetDomainAnalysisResult.VariablesRequired().Select(v=>v.Name));
	        args.Add(targetDomain.RootVariable.Name);

            #><#= QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain) #> target<#=QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain) #> = <#= QvtCodeGeneratorStrings.EnforceDomainMethodName(targetDomain) #>(match, <#= string.Join(",",args) #>);
			<#+
        }

        // Generating variables extraction from the resulting target domains
        #> 

		// Retrieving variables binded in the enforced domains
		<#+
        foreach (IRelationDomain targetDomain in targetDomains)
        {
            string bindingsContainer = "target" + QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain);
            #><#=RelationTemplateHelper.GenerateExtractVariablesFromMatch(analysisResult.GetResultOf(targetDomain), bindedSoFar, bindingsContainer) #>
			<#+
        }

        // Generating relation calls from where clause
        if (relation.Where != null)
        {
            #> 
		// Calling other relations as defined in the where clause
		<#+
            foreach (IRelationCallExp relationCall in relation.Where.Predicate.Select(p => p.ConditionExpression).OfType<IRelationCallExp>())
            {
                #><#=RelationTemplateHelper.GenerateExpression(relationCall, useMetamodelInterface) + ";" #>
				<#+
            }
        }
		#>}}}<#+
    }
	public void GenerateCheckMethod(IRelation relation, RelationAnalysisResult analysisResult)
	{
	    ISet<IVariable> bindedSoFar = new HashSet<IVariable>();

	    // Check method declaration
	    #>internal static ISet<<#= QvtCodeGeneratorStrings.CheckResultClassName(relation) #>> <#= QvtCodeGeneratorStrings.CheckMethodName() #>( <#= RelationTemplateHelper.GenerateRelationParamsCheckonly(true, relation, bindedSoFar) #> ) {

			ISet<<#= QvtCodeGeneratorStrings.CheckResultClassName(relation) #>> result = new HashSet<<#= QvtCodeGeneratorStrings.CheckResultClassName(relation) #>>();<#+

	    // Generating the calls to each check domain method
	    foreach (RelationDomain checkonlyDomain in relation.Domain.OfType<RelationDomain>().Where(d => !d.IsEnforceable.GetValueOrDefault() && (d.TypedModel != null)))
	    {
	        #>ISet<<#= QvtCodeGeneratorStrings.MatchDomainClassName(checkonlyDomain) #>> <#= QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain) #>s = <#= QvtCodeGeneratorStrings.CheckDomainMethodName(checkonlyDomain) #>(<#= checkonlyDomain.RootVariable.Name #>);
			<#+
	    }
	    List<IRelationDomain> checkonlyDomains = relation.Domain.OfType<IRelationDomain>().Where(d => !d.IsEnforceable.GetValueOrDefault() && (d.TypedModel != null)).ToList();

	    // Generating beginining of one foreach loop per set of of matches of each domain
	    foreach (IRelationDomain checkonlyDomain in checkonlyDomains)
	    {
	        #>foreach (<#=QvtCodeGeneratorStrings.MatchDomainClassName(checkonlyDomain) #> <#= QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain) #> in <#= QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain) #>s ) {
			<#+
	    }

	    // We have to keep track of the number of conditionnals (ie "if(){" )we start from now on
	    int nbConditionals = 0;

	    // Generate tests that variables common to different domains are equal
	    List<IRelationDomain> orderedCheckonlyDomains = checkonlyDomains.ToList();
	    foreach (IRelationDomain checkonlyDomain1 in orderedCheckonlyDomains)
	    {
	        int startIndex = orderedCheckonlyDomains.IndexOf(checkonlyDomain1) + 1;
	        int nbRemaining = orderedCheckonlyDomains.Count - startIndex;
	        foreach (IRelationDomain checkonlyDomain2 in orderedCheckonlyDomains.GetRange(startIndex, nbRemaining))
	        {
	            ISet<IVariable> commonBindedVariables =
	                new HashSet<IVariable>(analysisResult.GetResultOf(checkonlyDomain1).VariablesItCanBind);
	            ISet<IVariable> binded2 =
	                new HashSet<IVariable>(analysisResult.GetResultOf(checkonlyDomain2).VariablesItCanBind);
	            commonBindedVariables.IntersectWith(binded2);

	            List<string> conditions = new List<string>();
	            foreach (IVariable commonBindedVariable in commonBindedVariables)
	            {
	                conditions.Add(QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain1) + "." + commonBindedVariable.Name + "==" + QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain2) + "." + commonBindedVariable.Name);
	            }
	            if (conditions.Any())
	            {
	                #>if (<#=string.Join(" && ", conditions) #>) {<#+
	                nbConditionals++;
	            }
	        }
	    }

	    // At this point all the variables have been compared and are hence valid. We can generate code to extract them from the domains.
	    foreach (IRelationDomain checkonlyDomain in checkonlyDomains)
	    {
	        #><#=RelationTemplateHelper.GenerateExtractVariablesFromMatch(analysisResult.GetResultOf(checkonlyDomain), bindedSoFar, QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain)) #>
			<#+
	    }

	    // Finally we can generate tests for csharp constraints that require such variables
	    // TODO test that all the required variables are indeed provided, before using them (otherwise compilation error, probably)
	    foreach (IRelationDomain checkonlyDomain1 in orderedCheckonlyDomains)
	    {
	        ICollection<IPropertyTemplateItem> propertyTemplateItemsRequiringVariables =
	            analysisResult.GetResultOf(checkonlyDomain1).IPropertyTemplateItemToVariablesRequired.Keys;
	        List<string> conditions = new List<string>();
	        foreach (IPropertyTemplateItem propertyTemplateItemRequiringVariable in propertyTemplateItemsRequiringVariables)
	        {
	            string containerVar = propertyTemplateItemRequiringVariable.ObjContainer.BindsTo.Name;
	            string property = propertyTemplateItemRequiringVariable.ReferredProperty.Name;
	            conditions.Add(containerVar + "." + property + " == (" + RelationTemplateHelper.GenerateExpression(propertyTemplateItemRequiringVariable.Value, true) + ")");
	        }
	        if (conditions.Any())
	        {
	            #>if(<#=string.Join(" && ", conditions) #>) {<#+
	            nbConditionals++;
	        }
	    }

	    // Generate code to create a "CheckonlyMatch" object
	    #><#=QvtCodeGeneratorStrings.CheckResultClassName(relation) #> checkonlysMatch = new <#=QvtCodeGeneratorStrings.CheckResultClassName(relation) #> () {<#+
		foreach (IRelationDomain checkonlyDomain in checkonlyDomains)
		{
		    #><#= QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain) #> = <#=QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain) #>,
			<#+
		} 

		#>};
		result.Add(checkonlysMatch);<#+

		for (int i = 0; i < nbConditionals; i++)
		{
		    #>
			} // End if
			<#+
		}

		foreach (IRelationDomain _ in checkonlyDomains)
		{
		    #>
			} // End foreach
			<#+
		}
	
	
	
	#>
	return result;
	}
	<#+
	}
 
 
 #>
