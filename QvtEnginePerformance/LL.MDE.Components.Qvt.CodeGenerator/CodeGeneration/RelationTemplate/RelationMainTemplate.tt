<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="LL.MDE.Components.Qvt.Common" #>
<#@ import namespace="LL.MDE.Components.Qvt.QvtCodeGenerator.Analysis" #>
<#@ import namespace="LL.MDE.Components.Qvt.QvtCodeGenerator.CodeGeneration" #>
<#@ import namespace="LL.MDE.Components.Qvt.QvtCodeGenerator.CodeGeneration.RelationTemplate" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.EMOF" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.EssentialOCL" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.QVTBase" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.QVTRelation" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.QVTTemplate" #>

<#@ output extension=".cs" #>


<#@ include file="RelationHelperTemplate.tt" #>

<#

    // Small hack to bypass limitation of ForTea plugin ( https://github.com/MrJul/ForTea/issues/3 )
    // We redeclare members so that ForTea finds them, and enables code completion etc. 
    // The errors can be ignored, as the generated .cs file compiles correctly.
    IRelation relation = this.relation;
    RelationAnalysisResult analysisResult = this.analysisResult;
    bool useMetamodelInterface = this.useMetamodelInterface;
    #>
using System;
using System.Collections.Generic;
using System.Linq;
using LL.MDE.Components.Qvt.Common;<#

    // Generating of the "usings", for each package of each metamodel used in the transformation
    foreach (IPackage package in relation.Transformation.ModelParameter.Select(p => p.UsedPackage).SelectMany(i => i).Distinct())
    {
        #>using <#= package.Name #>;<#
    }

    // Generation of the namespace 
    #><#= QvtCodeGeneratorStrings.Namespace(relation.Transformation) #>{ <# 
	 
    // Generation of the Relation class 
    #>public class <#=QvtCodeGeneratorStrings.RelationClassName(relation) #> {<#
	if (useMetamodelInterface)
	{
	    #>private readonly <#=nameof(IMetaModelInterface) #> editor;<#
	} 
		#>private readonly <#= QvtCodeGeneratorStrings.TransformationName(relation.Transformation) #> transformation;

		public <#=QvtCodeGeneratorStrings.RelationClassName(relation) #>(<#= useMetamodelInterface ? nameof(IMetaModelInterface) + " editor ," : "" #> <#=QvtCodeGeneratorStrings.TransformationName(relation.Transformation) #> transformation ) {<#
		if (useMetamodelInterface)
		{ 
		    #>this.editor = editor;<# 
		} 
			#>this.transformation = transformation;}<# 

    // Generation of the Match class specific for this relation
    GenerateMatchClasses(relation, analysisResult); 

	// Generation of the input/output classes specific to this relation
    GenerateDictionnaryClasses(relation);

	// Generation of the traceability map
	#>private readonly Dictionary<CheckOnlyDomains, EnforceDomains> traceabilityMap = new Dictionary<CheckOnlyDomains, EnforceDomains>();<#


	// Generation of a method to try to find previous results (used for when clauses)
    GenerateFindPreviousResultMethod(relation);
	
    // For each checkonly domain of the relation, we generate a "partial check" method
    // It finds all the matches without looking outside
    foreach (IRelationDomain domain in relation.Domain.OfType<IRelationDomain>().Where(d => !d.IsEnforceable.GetValueOrDefault() && (d.TypedModel != null)))
    {
        GenerateDomainCheckMethod(domain, analysisResult.GetResultOf(domain));
    }

    GenerateCheckAndEnforceMethod(relation);

    // Then we have an operation which will try to match the partial checks all together
    GenerateCheckMethod(relation, analysisResult);

    // For each transfo target we generate enforce method
    foreach (ITypedModel targetParam in analysisResult.DirectionsThatCanBeEnforced)
    {
        GenerateEnforceDomainMethods(relation, targetParam, analysisResult, useMetamodelInterface);
    }

    GenerateEnforceMethod(relation, analysisResult, useMetamodelInterface);
    #> 

}  // End class

} // End namespace





