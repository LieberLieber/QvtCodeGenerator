<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrAbstractRuleCreateOutput" xml:space="preserve">
    <value>There was no instantiating rule for an element of type {0}. Consider creating a transformation rule for this case and mark it instantiating for the {1}-rule</value>
    <comment>{0} is the type name of the input parameter, {1} is the type name of the rule</comment>
  </data>
  <data name="ErrAbstractRuleT2CreateOutput" xml:space="preserve">
    <value>There was no instantiating rule for elements of type {0} and {1}. Consider creating a transformation rule for this case and mark it instantiating for the {2}-rule</value>
    <comment>{0} is the type name of the first input parameter, {1} is the type name of the second input parameter and {2} is the type name of the rule</comment>
  </data>
  <data name="ErrCall1ArgNoSelectorMustInherit" xml:space="preserve">
    <value>To call a transformation rule without specifying a selector, the input type TRequiredInput must be an assignable of TIn and the output type TRequiredOutput must be an assignable of TOut</value>
  </data>
  <data name="ErrCall2ArgNoSelectorMustInherit" xml:space="preserve">
    <value>To call a transformation rule without specifying a selector, the input type TRequiredInput1 must be an assignable of TIn1, the input type TRequiredInput2 must be an assignable type of TIn2 and the output type TRequiredOutput must be an assignable of TOut</value>
  </data>
  <data name="ErrCallTransNoSelectorMustInherit" xml:space="preserve">
    <value>To call a transformation rule without specifying a selector, the input type of the transformation must be an assignable of TIn and the output must be an assignable of TOut</value>
  </data>
  <data name="ErrCallTransT2NoSelectorMustInherit" xml:space="preserve">
    <value>To call a transformation rule without specifying a selector, the input types of the transformation must be assignables of TIn1 and TIn2 and the output must be an assignable of TOut</value>
  </data>
  <data name="ErrComputationOutputDelayed" xml:space="preserve">
    <value>The output of this computation has been delayed. Please subscribe to the OutputInitialized event to get informed when the Output has been created. If you were using the trace functionality, consider using the Trace methods to get the computation objects and wait until the output has been created. Alternatively, change the structure of your transformation rules to ensure that this computation has been initialized when you are making your request.</value>
  </data>
  <data name="ErrMarkInstantiating1ArgMustInherit" xml:space="preserve">
    <value>To instantiate transformation rules, the input type TRequiredInput must be an assignable of TIn and the output type TRequiredOutput must be an assignable of TOut</value>
  </data>
  <data name="ErrMarkInstantiating2ArgMustInherit" xml:space="preserve">
    <value>To instantiate transformation rules, the input type TRequiredInput1 must be an assignable of TIn1, the input type TRequiredInput2 must be an assignable of TIn2 and the output type TRequiredOutput must be an assignable of TOut</value>
  </data>
  <data name="ErrMarkInstantiatingMustInherit" xml:space="preserve">
    <value>To instantiate a transformation rule, the input type of the transformation must be an assignable of TIn and the output must be an assignable of TOut</value>
  </data>
  <data name="ErrMarkInstantiatingMustInheritT2" xml:space="preserve">
    <value>To instantiate a transformation rule, the input types of the transformation must be assignables of TIn1 and TIn2 and the output must be an assignable of TOut</value>
  </data>
  <data name="ErrReflectiveTransformationCustomRulesRuleTypeAlreadyInUse" xml:space="preserve">
    <value>This transformation already contains a rule of type {0}. Reflective transformation must not contain more than one rule per rule type.</value>
    <comment>{0} is the rule type name</comment>
  </data>
  <data name="ErrReflectiveTransformationOverrideNoInheritance" xml:space="preserve">
    <value>The rule {0} cannot override the rule {1} because {0} does not inherit from {1}.</value>
    <comment>{0} is the overridden transformation rule type name, {1} is the overriding transformation rule type name</comment>
  </data>
  <data name="ErrRequires1ArgNoSelectorMustInherit" xml:space="preserve">
    <value>To require a transformation rule without specifying a selector, the input type TRequiredInput must be an assignable of TIn and the output type TRequiredOutput must be an assignable of TOut</value>
  </data>
  <data name="ErrRequires2ArgNoSelectorMustInherit" xml:space="preserve">
    <value>To require a transformation rule without specifying a selector, the input type TRequiredInput1 must be an assignable of TIn1, the input type TRequiredInput2 must be an assignable of TIn2 and the output type TRequiredOutput must be an assignable of TOut</value>
  </data>
  <data name="ErrRequiresTransNoSelectorMustInherit" xml:space="preserve">
    <value>To require a transformation rule without specifying a selector, the input type of the transformation must be an assignable of TIn and the output must be an assignable of TOut</value>
  </data>
  <data name="ErrRequiresTransT2NoSelectorMustInherit" xml:space="preserve">
    <value>To require a transformation rule without specifying a selector, the input types of the transformation must be assignables of TIn1 and TIn2 and the output must be an assignable of TOut</value>
  </data>
  <data name="ErrTransformationEngineStartRuleNotRuleOfTransformation" xml:space="preserve">
    <value>The specified transformation rule to act as start rule is not a rule of the specified transformation!</value>
  </data>
  <data name="ErrTransformationRuleWrongNumberOfArguments" xml:space="preserve">
    <value>The transformation rule {0} has been called with a wrong number of arguments.</value>
    <comment>{0} is the rule type name</comment>
  </data>
</root>